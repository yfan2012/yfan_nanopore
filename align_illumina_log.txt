Settings:
  Output files: "/atium/Data/Nanopore/cpowgs/170816_BUCC/bcc_refs/bambifaria.*.bt2"
  Line rate: 6 (line is 64 bytes)
  Lines per side: 1 (side is 64 bytes)
  Offset rate: 4 (one in 16)
  FTable chars: 10
  Strings: unpacked
  Max bucket size: default
  Max bucket size, sqrt multiplier: default
  Max bucket size, len divisor: 4
  Difference-cover sample period: 1024
  Endianness: little
  Actual local endianness: little
  Sanity checking: disabled
  Assertions: disabled
  Random seed: 0
  Sizeofs: void*:8, int:4, long:8, size_t:8
Input files DNA, FASTA:
  /atium/Data/Nanopore/cpowgs/170816_BUCC/bcc_refs/bambifaria.fa
Reading reference sizes
  Time reading reference sizes: 00:00:00
Calculating joined length
Writing header
Reserving space for joined string
Joining reference sequences
  Time to join reference sequences: 00:00:01
bmax according to bmaxDivN setting: 1882141
Using parameters --bmax 1411606 --dcv 1024
  Doing ahead-of-time memory usage test
  Passed!  Constructing with these parameters: --bmax 1411606 --dcv 1024
Constructing suffix-array element generator
Building DifferenceCoverSample
  Building sPrime
  Building sPrimeOrder
  V-Sorting samples
  V-Sorting samples time: 00:00:00
  Allocating rank array
  Ranking v-sort output
  Ranking v-sort output time: 00:00:00
  Invoking Larsson-Sadakane on ranks
  Invoking Larsson-Sadakane on ranks time: 00:00:00
  Sanity-checking and returning
Building samples
Reserving space for 12 sample suffixes
Generating random suffixes
QSorting 12 sample offsets, eliminating duplicates
QSorting sample offsets, eliminating duplicates time: 00:00:00
Multikey QSorting 12 samples
  (Using difference cover)
  Multikey QSorting samples time: 00:00:00
Calculating bucket sizes
  Binary sorting into buckets
  10%
  20%
  30%
  40%
  50%
  60%
  70%
  80%
  90%
  100%
  Binary sorting into buckets time: 00:00:00
Splitting and merging
  Splitting and merging time: 00:00:00
Split 2, merged 8; iterating...
  Binary sorting into buckets
  10%
  20%
  30%
  40%
  50%
  60%
  70%
  80%
  90%
  100%
  Binary sorting into buckets time: 00:00:01
Splitting and merging
  Splitting and merging time: 00:00:00
Split 1, merged 1; iterating...
  Binary sorting into buckets
  10%
  20%
  30%
  40%
  50%
  60%
  70%
  80%
  90%
  100%
  Binary sorting into buckets time: 00:00:00
Splitting and merging
  Splitting and merging time: 00:00:00
Avg bucket size: 1.25476e+06 (target: 1411605)
Converting suffix-array elements to index image
Allocating ftab, absorbFtab
Entering Ebwt loop
Getting block 1 of 6
  Reserving size (1411606) for bucket
  Calculating Z arrays
  Calculating Z arrays time: 00:00:00
  Entering block accumulator loop:
  10%
  20%
  30%
  40%
  50%
  60%
  70%
  80%
  90%
  100%
  Block accumulator loop time: 00:00:00
  Sorting block of length 1146846
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 1146847
Getting block 2 of 6
  Reserving size (1411606) for bucket
  Calculating Z arrays
  Calculating Z arrays time: 00:00:00
  Entering block accumulator loop:
  10%
  20%
  30%
  40%
  50%
  60%
  70%
  80%
  90%
  100%
  Block accumulator loop time: 00:00:00
  Sorting block of length 1389769
  (Using difference cover)
  Sorting block time: 00:00:01
Returning block of 1389770
Getting block 3 of 6
  Reserving size (1411606) for bucket
  Calculating Z arrays
  Calculating Z arrays time: 00:00:00
  Entering block accumulator loop:
  10%
  20%
  30%
  40%
  50%
  60%
  70%
  80%
  90%
  100%
  Block accumulator loop time: 00:00:00
  Sorting block of length 1350044
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 1350045
Getting block 4 of 6
  Reserving size (1411606) for bucket
  Calculating Z arrays
  Calculating Z arrays time: 00:00:00
  Entering block accumulator loop:
  10%
  20%
  30%
  40%
  50%
  60%
  70%
  80%
  90%
  100%
  Block accumulator loop time: 00:00:01
  Sorting block of length 1240076
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 1240077
Getting block 5 of 6
  Reserving size (1411606) for bucket
  Calculating Z arrays
  Calculating Z arrays time: 00:00:00
  Entering block accumulator loop:
  10%
  20%
  30%
  40%
  50%
  60%
  70%
  80%
  90%
  100%
  Block accumulator loop time: 00:00:00
  Sorting block of length 1400407
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 1400408
Getting block 6 of 6
  Reserving size (1411606) for bucket
  Calculating Z arrays
  Calculating Z arrays time: 00:00:00
  Entering block accumulator loop:
  10%
  20%
  30%
  40%
  50%
  60%
  70%
  80%
  90%
  100%
  Block accumulator loop time: 00:00:00
  Sorting block of length 1001420
  (Using difference cover)
  Sorting block time: 00:00:01
Returning block of 1001421
Exited Ebwt loop
fchr[A]: 0
fchr[C]: 1253404
fchr[G]: 3764260
fchr[T]: 6280592
fchr[$]: 7528567
Exiting Ebwt::buildToDisk()
Returning from initFromVector
Wrote 6704365 bytes to primary EBWT file: /atium/Data/Nanopore/cpowgs/170816_BUCC/bcc_refs/bambifaria.1.bt2
Wrote 1882148 bytes to secondary EBWT file: /atium/Data/Nanopore/cpowgs/170816_BUCC/bcc_refs/bambifaria.2.bt2
Re-opening _in1 and _in2 as input streams
Returning from Ebwt constructor
Headers:
    len: 7528567
    bwtLen: 7528568
    sz: 1882142
    bwtSz: 1882142
    lineRate: 6
    offRate: 4
    offMask: 0xfffffff0
    ftabChars: 10
    eftabLen: 20
    eftabSz: 80
    ftabLen: 1048577
    ftabSz: 4194308
    offsLen: 470536
    offsSz: 1882144
    lineSz: 64
    sideSz: 64
    sideBwtSz: 48
    sideBwtLen: 192
    numSides: 39212
    numLines: 39212
    ebwtTotLen: 2509568
    ebwtTotSz: 2509568
    color: 0
    reverse: 0
Total time for call to driver() for forward index: 00:00:05
Reading reference sizes
  Time reading reference sizes: 00:00:00
Calculating joined length
Writing header
Reserving space for joined string
Joining reference sequences
  Time to join reference sequences: 00:00:00
  Time to reverse reference sequence: 00:00:00
bmax according to bmaxDivN setting: 1882141
Using parameters --bmax 1411606 --dcv 1024
  Doing ahead-of-time memory usage test
  Passed!  Constructing with these parameters: --bmax 1411606 --dcv 1024
Constructing suffix-array element generator
Building DifferenceCoverSample
  Building sPrime
  Building sPrimeOrder
  V-Sorting samples
  V-Sorting samples time: 00:00:00
  Allocating rank array
  Ranking v-sort output
  Ranking v-sort output time: 00:00:00
  Invoking Larsson-Sadakane on ranks
  Invoking Larsson-Sadakane on ranks time: 00:00:00
  Sanity-checking and returning
Building samples
Reserving space for 12 sample suffixes
Generating random suffixes
QSorting 12 sample offsets, eliminating duplicates
QSorting sample offsets, eliminating duplicates time: 00:00:00
Multikey QSorting 12 samples
  (Using difference cover)
  Multikey QSorting samples time: 00:00:00
Calculating bucket sizes
  Binary sorting into buckets
  10%
  20%
  30%
  40%
  50%
  60%
  70%
  80%
  90%
  100%
  Binary sorting into buckets time: 00:00:01
Splitting and merging
  Splitting and merging time: 00:00:00
Split 1, merged 8; iterating...
  Binary sorting into buckets
  10%
  20%
  30%
  40%
  50%
  60%
  70%
  80%
  90%
  100%
  Binary sorting into buckets time: 00:00:00
Splitting and merging
  Splitting and merging time: 00:00:00
Split 1, merged 0; iterating...
  Binary sorting into buckets
  10%
  20%
  30%
  40%
  50%
  60%
  70%
  80%
  90%
  100%
  Binary sorting into buckets time: 00:00:00
Splitting and merging
  Splitting and merging time: 00:00:00
Split 1, merged 1; iterating...
  Binary sorting into buckets
  10%
  20%
  30%
  40%
  50%
  60%
  70%
  80%
  90%
  100%
  Binary sorting into buckets time: 00:00:01
Splitting and merging
  Splitting and merging time: 00:00:00
Split 1, merged 0; iterating...
  Binary sorting into buckets
  10%
  20%
  30%
  40%
  50%
  60%
  70%
  80%
  90%
  100%
  Binary sorting into buckets time: 00:00:00
Splitting and merging
  Splitting and merging time: 00:00:00
Avg bucket size: 1.07551e+06 (target: 1411605)
Converting suffix-array elements to index image
Allocating ftab, absorbFtab
Entering Ebwt loop
Getting block 1 of 7
  Reserving size (1411606) for bucket
  Calculating Z arrays
  Calculating Z arrays time: 00:00:00
  Entering block accumulator loop:
  10%
  20%
  30%
  40%
  50%
  60%
  70%
  80%
  90%
  100%
  Block accumulator loop time: 00:00:00
  Sorting block of length 1377907
  (Using difference cover)
  Sorting block time: 00:00:01
Returning block of 1377908
Getting block 2 of 7
  Reserving size (1411606) for bucket
  Calculating Z arrays
  Calculating Z arrays time: 00:00:00
  Entering block accumulator loop:
  10%
  20%
  30%
  40%
  50%
  60%
  70%
  80%
  90%
  100%
  Block accumulator loop time: 00:00:00
  Sorting block of length 1305855
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 1305856
Getting block 3 of 7
  Reserving size (1411606) for bucket
  Calculating Z arrays
  Calculating Z arrays time: 00:00:00
  Entering block accumulator loop:
  10%
  20%
  30%
  40%
  50%
  60%
  70%
  80%
  90%
  100%
  Block accumulator loop time: 00:00:00
  Sorting block of length 821640
  (Using difference cover)
  Sorting block time: 00:00:01
Returning block of 821641
Getting block 4 of 7
  Reserving size (1411606) for bucket
  Calculating Z arrays
  Calculating Z arrays time: 00:00:00
  Entering block accumulator loop:
  10%
  20%
  30%
  40%
  50%
  60%
  70%
  80%
  90%
  100%
  Block accumulator loop time: 00:00:00
  Sorting block of length 864777
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 864778
Getting block 5 of 7
  Reserving size (1411606) for bucket
  Calculating Z arrays
  Calculating Z arrays time: 00:00:00
  Entering block accumulator loop:
  10%
  20%
  30%
  40%
  50%
  60%
  70%
  80%
  90%
  100%
  Block accumulator loop time: 00:00:00
  Sorting block of length 750827
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 750828
Getting block 6 of 7
  Reserving size (1411606) for bucket
  Calculating Z arrays
  Calculating Z arrays time: 00:00:00
  Entering block accumulator loop:
  10%
  20%
  30%
  40%
  50%
  60%
  70%
  80%
  90%
  100%
  Block accumulator loop time: 00:00:01
  Sorting block of length 1298703
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 1298704
Getting block 7 of 7
  Reserving size (1411606) for bucket
  Calculating Z arrays
  Calculating Z arrays time: 00:00:00
  Entering block accumulator loop:
  10%
  20%
  30%
  40%
  50%
  60%
  70%
  80%
  90%
  100%
  Block accumulator loop time: 00:00:00
  Sorting block of length 1108852
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 1108853
Exited Ebwt loop
fchr[A]: 0
fchr[C]: 1253404
fchr[G]: 3764260
fchr[T]: 6280592
fchr[$]: 7528567
Exiting Ebwt::buildToDisk()
Returning from initFromVector
Wrote 6704365 bytes to primary EBWT file: /atium/Data/Nanopore/cpowgs/170816_BUCC/bcc_refs/bambifaria.rev.1.bt2
Wrote 1882148 bytes to secondary EBWT file: /atium/Data/Nanopore/cpowgs/170816_BUCC/bcc_refs/bambifaria.rev.2.bt2
Re-opening _in1 and _in2 as input streams
Returning from Ebwt constructor
Headers:
    len: 7528567
    bwtLen: 7528568
    sz: 1882142
    bwtSz: 1882142
    lineRate: 6
    offRate: 4
    offMask: 0xfffffff0
    ftabChars: 10
    eftabLen: 20
    eftabSz: 80
    ftabLen: 1048577
    ftabSz: 4194308
    offsLen: 470536
    offsSz: 1882144
    lineSz: 64
    sideSz: 64
    sideBwtSz: 48
    sideBwtLen: 192
    numSides: 39212
    numLines: 39212
    ebwtTotLen: 2509568
    ebwtTotSz: 2509568
    color: 0
    reverse: 1
Total time for backward call to driver() for mirror index: 00:00:05
Settings:
  Output files: "/atium/Data/Nanopore/cpowgs/170816_BUCC/bcc_refs/banthina.*.bt2"
  Line rate: 6 (line is 64 bytes)
  Lines per side: 1 (side is 64 bytes)
  Offset rate: 4 (one in 16)
  FTable chars: 10
  Strings: unpacked
  Max bucket size: default
  Max bucket size, sqrt multiplier: default
  Max bucket size, len divisor: 4
  Difference-cover sample period: 1024
  Endianness: little
  Actual local endianness: little
  Sanity checking: disabled
  Assertions: disabled
  Random seed: 0
  Sizeofs: void*:8, int:4, long:8, size_t:8
Input files DNA, FASTA:
  /atium/Data/Nanopore/cpowgs/170816_BUCC/bcc_refs/banthina.fa
Reading reference sizes
  Time reading reference sizes: 00:00:00
Calculating joined length
Writing header
Reserving space for joined string
Joining reference sequences
  Time to join reference sequences: 00:00:00
bmax according to bmaxDivN setting: 1818262
Using parameters --bmax 1363697 --dcv 1024
  Doing ahead-of-time memory usage test
  Passed!  Constructing with these parameters: --bmax 1363697 --dcv 1024
Constructing suffix-array element generator
Building DifferenceCoverSample
  Building sPrime
  Building sPrimeOrder
  V-Sorting samples
  V-Sorting samples time: 00:00:00
  Allocating rank array
  Ranking v-sort output
  Ranking v-sort output time: 00:00:00
  Invoking Larsson-Sadakane on ranks
  Invoking Larsson-Sadakane on ranks time: 00:00:00
  Sanity-checking and returning
Building samples
Reserving space for 12 sample suffixes
Generating random suffixes
QSorting 12 sample offsets, eliminating duplicates
QSorting sample offsets, eliminating duplicates time: 00:00:00
Multikey QSorting 12 samples
  (Using difference cover)
  Multikey QSorting samples time: 00:00:00
Calculating bucket sizes
  Binary sorting into buckets
  10%
  20%
  30%
  40%
  50%
  60%
  70%
  80%
  90%
  100%
  Binary sorting into buckets time: 00:00:00
Splitting and merging
  Splitting and merging time: 00:00:00
Split 2, merged 7; iterating...
  Binary sorting into buckets
  10%
  20%
  30%
  40%
  50%
  60%
  70%
  80%
  90%
  100%
  Binary sorting into buckets time: 00:00:01
Splitting and merging
  Splitting and merging time: 00:00:00
Split 1, merged 1; iterating...
  Binary sorting into buckets
  10%
  20%
  30%
  40%
  50%
  60%
  70%
  80%
  90%
  100%
  Binary sorting into buckets time: 00:00:00
Splitting and merging
  Splitting and merging time: 00:00:00
Avg bucket size: 909130 (target: 1363696)
Converting suffix-array elements to index image
Allocating ftab, absorbFtab
Entering Ebwt loop
Getting block 1 of 8
  Reserving size (1363697) for bucket
  Calculating Z arrays
  Calculating Z arrays time: 00:00:00
  Entering block accumulator loop:
  10%
  20%
  30%
  40%
  50%
  60%
  70%
  80%
  90%
  100%
  Block accumulator loop time: 00:00:00
  Sorting block of length 308458
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 308459
Getting block 2 of 8
  Reserving size (1363697) for bucket
  Calculating Z arrays
  Calculating Z arrays time: 00:00:00
  Entering block accumulator loop:
  10%
  20%
  30%
  40%
  50%
  60%
  70%
  80%
  90%
  100%
  Block accumulator loop time: 00:00:00
  Sorting block of length 1303752
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 1303753
Getting block 3 of 8
  Reserving size (1363697) for bucket
  Calculating Z arrays
  Calculating Z arrays time: 00:00:00
  Entering block accumulator loop:
  10%
  20%
  30%
  40%
  50%
  60%
  70%
  80%
  90%
  100%
  Block accumulator loop time: 00:00:00
  Sorting block of length 840092
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 840093
Getting block 4 of 8
  Reserving size (1363697) for bucket
  Calculating Z arrays
  Calculating Z arrays time: 00:00:00
  Entering block accumulator loop:
  10%
  20%
  30%
  40%
  50%
  60%
  70%
  80%
  90%
  100%
  Block accumulator loop time: 00:00:00
  Sorting block of length 975482
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 975483
Getting block 5 of 8
  Reserving size (1363697) for bucket
  Calculating Z arrays
  Calculating Z arrays time: 00:00:00
  Entering block accumulator loop:
  10%
  20%
  30%
  40%
  50%
  60%
  70%
  80%
  90%
  100%
  Block accumulator loop time: 00:00:00
  Sorting block of length 1351109
  (Using difference cover)
  Sorting block time: 00:00:01
Returning block of 1351110
Getting block 6 of 8
  Reserving size (1363697) for bucket
  Calculating Z arrays
  Calculating Z arrays time: 00:00:00
  Entering block accumulator loop:
  10%
  20%
  30%
  40%
  50%
  60%
  70%
  80%
  90%
  100%
  Block accumulator loop time: 00:00:00
  Sorting block of length 910035
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 910036
Getting block 7 of 8
  Reserving size (1363697) for bucket
  Calculating Z arrays
  Calculating Z arrays time: 00:00:00
  Entering block accumulator loop:
  10%
  20%
  30%
  40%
  50%
  60%
  70%
  80%
  90%
  100%
  Block accumulator loop time: 00:00:00
  Sorting block of length 477745
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 477746
Getting block 8 of 8
  Reserving size (1363697) for bucket
  Calculating Z arrays
  Calculating Z arrays time: 00:00:00
  Entering block accumulator loop:
  10%
  20%
  30%
  40%
  50%
  60%
  70%
  80%
  90%
  100%
  Block accumulator loop time: 00:00:01
  Sorting block of length 1106371
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 1106372
Exited Ebwt loop
fchr[A]: 0
fchr[C]: 1190023
fchr[G]: 3613089
fchr[T]: 6078953
fchr[$]: 7273051
Exiting Ebwt::buildToDisk()
Returning from initFromVector
Wrote 6619323 bytes to primary EBWT file: /atium/Data/Nanopore/cpowgs/170816_BUCC/bcc_refs/banthina.1.bt2
Wrote 1818268 bytes to secondary EBWT file: /atium/Data/Nanopore/cpowgs/170816_BUCC/bcc_refs/banthina.2.bt2
Re-opening _in1 and _in2 as input streams
Returning from Ebwt constructor
Headers:
    len: 7273051
    bwtLen: 7273052
    sz: 1818263
    bwtSz: 1818263
    lineRate: 6
    offRate: 4
    offMask: 0xfffffff0
    ftabChars: 10
    eftabLen: 20
    eftabSz: 80
    ftabLen: 1048577
    ftabSz: 4194308
    offsLen: 454566
    offsSz: 1818264
    lineSz: 64
    sideSz: 64
    sideBwtSz: 48
    sideBwtLen: 192
    numSides: 37881
    numLines: 37881
    ebwtTotLen: 2424384
    ebwtTotSz: 2424384
    color: 0
    reverse: 0
Total time for call to driver() for forward index: 00:00:05
Reading reference sizes
  Time reading reference sizes: 00:00:00
Calculating joined length
Writing header
Reserving space for joined string
Joining reference sequences
  Time to join reference sequences: 00:00:00
  Time to reverse reference sequence: 00:00:00
bmax according to bmaxDivN setting: 1818262
Using parameters --bmax 1363697 --dcv 1024
  Doing ahead-of-time memory usage test
  Passed!  Constructing with these parameters: --bmax 1363697 --dcv 1024
Constructing suffix-array element generator
Building DifferenceCoverSample
  Building sPrime
  Building sPrimeOrder
  V-Sorting samples
  V-Sorting samples time: 00:00:00
  Allocating rank array
  Ranking v-sort output
  Ranking v-sort output time: 00:00:00
  Invoking Larsson-Sadakane on ranks
  Invoking Larsson-Sadakane on ranks time: 00:00:00
  Sanity-checking and returning
Building samples
Reserving space for 12 sample suffixes
Generating random suffixes
QSorting 12 sample offsets, eliminating duplicates
QSorting sample offsets, eliminating duplicates time: 00:00:00
Multikey QSorting 12 samples
  (Using difference cover)
  Multikey QSorting samples time: 00:00:00
Calculating bucket sizes
  Binary sorting into buckets
  10%
  20%
  30%
  40%
  50%
  60%
  70%
  80%
  90%
  100%
  Binary sorting into buckets time: 00:00:01
Splitting and merging
  Splitting and merging time: 00:00:00
Split 1, merged 6; iterating...
  Binary sorting into buckets
  10%
  20%
  30%
  40%
  50%
  60%
  70%
  80%
  90%
  100%
  Binary sorting into buckets time: 00:00:00
Splitting and merging
  Splitting and merging time: 00:00:00
Avg bucket size: 1.03901e+06 (target: 1363696)
Converting suffix-array elements to index image
Allocating ftab, absorbFtab
Entering Ebwt loop
Getting block 1 of 7
  Reserving size (1363697) for bucket
  Calculating Z arrays
  Calculating Z arrays time: 00:00:00
  Entering block accumulator loop:
  10%
  20%
  30%
  40%
  50%
  60%
  70%
  80%
  90%
  100%
  Block accumulator loop time: 00:00:00
  Sorting block of length 1092171
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 1092172
Getting block 2 of 7
  Reserving size (1363697) for bucket
  Calculating Z arrays
  Calculating Z arrays time: 00:00:00
  Entering block accumulator loop:
  10%
  20%
  30%
  40%
  50%
  60%
  70%
  80%
  90%
  100%
  Block accumulator loop time: 00:00:00
  Sorting block of length 975950
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 975951
Getting block 3 of 7
  Reserving size (1363697) for bucket
  Calculating Z arrays
  Calculating Z arrays time: 00:00:00
  Entering block accumulator loop:
  10%
  20%
  30%
  40%
  50%
  60%
  70%
  80%
  90%
  100%
  Block accumulator loop time: 00:00:00
  Sorting block of length 857838
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 857839
Getting block 4 of 7
  Reserving size (1363697) for bucket
  Calculating Z arrays
  Calculating Z arrays time: 00:00:00
  Entering block accumulator loop:
  10%
  20%
  30%
  40%
  50%
  60%
  70%
  80%
  90%
  100%
  Block accumulator loop time: 00:00:00
  Sorting block of length 1137320
  (Using difference cover)
  Sorting block time: 00:00:01
Returning block of 1137321
Getting block 5 of 7
  Reserving size (1363697) for bucket
  Calculating Z arrays
  Calculating Z arrays time: 00:00:00
  Entering block accumulator loop:
  10%
  20%
  30%
  40%
  50%
  60%
  70%
  80%
  90%
  100%
  Block accumulator loop time: 00:00:00
  Sorting block of length 891363
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 891364
Getting block 6 of 7
  Reserving size (1363697) for bucket
  Calculating Z arrays
  Calculating Z arrays time: 00:00:00
  Entering block accumulator loop:
  10%
  20%
  30%
  40%
  50%
  60%
  70%
  80%
  90%
  100%
  Block accumulator loop time: 00:00:00
  Sorting block of length 1354206
  (Using difference cover)
  Sorting block time: 00:00:01
Returning block of 1354207
Getting block 7 of 7
  Reserving size (1363697) for bucket
  Calculating Z arrays
  Calculating Z arrays time: 00:00:00
  Entering block accumulator loop:
  10%
  20%
  30%
  40%
  50%
  60%
  70%
  80%
  90%
  100%
  Block accumulator loop time: 00:00:00
  Sorting block of length 964197
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 964198
Exited Ebwt loop
fchr[A]: 0
fchr[C]: 1190023
fchr[G]: 3613089
fchr[T]: 6078953
fchr[$]: 7273051
Exiting Ebwt::buildToDisk()
Returning from initFromVector
Wrote 6619323 bytes to primary EBWT file: /atium/Data/Nanopore/cpowgs/170816_BUCC/bcc_refs/banthina.rev.1.bt2
Wrote 1818268 bytes to secondary EBWT file: /atium/Data/Nanopore/cpowgs/170816_BUCC/bcc_refs/banthina.rev.2.bt2
Re-opening _in1 and _in2 as input streams
Returning from Ebwt constructor
Headers:
    len: 7273051
    bwtLen: 7273052
    sz: 1818263
    bwtSz: 1818263
    lineRate: 6
    offRate: 4
    offMask: 0xfffffff0
    ftabChars: 10
    eftabLen: 20
    eftabSz: 80
    ftabLen: 1048577
    ftabSz: 4194308
    offsLen: 454566
    offsSz: 1818264
    lineSz: 64
    sideSz: 64
    sideBwtSz: 48
    sideBwtLen: 192
    numSides: 37881
    numLines: 37881
    ebwtTotLen: 2424384
    ebwtTotSz: 2424384
    color: 0
    reverse: 1
Total time for backward call to driver() for mirror index: 00:00:04
Settings:
  Output files: "/atium/Data/Nanopore/cpowgs/170816_BUCC/bcc_refs/bcenocepacia.*.bt2"
  Line rate: 6 (line is 64 bytes)
  Lines per side: 1 (side is 64 bytes)
  Offset rate: 4 (one in 16)
  FTable chars: 10
  Strings: unpacked
  Max bucket size: default
  Max bucket size, sqrt multiplier: default
  Max bucket size, len divisor: 4
  Difference-cover sample period: 1024
  Endianness: little
  Actual local endianness: little
  Sanity checking: disabled
  Assertions: disabled
  Random seed: 0
  Sizeofs: void*:8, int:4, long:8, size_t:8
Input files DNA, FASTA:
  /atium/Data/Nanopore/cpowgs/170816_BUCC/bcc_refs/bcenocepacia.fa
Reading reference sizes
  Time reading reference sizes: 00:00:01
Calculating joined length
Writing header
Reserving space for joined string
Joining reference sequences
  Time to join reference sequences: 00:00:00
bmax according to bmaxDivN setting: 2013945
Using parameters --bmax 1510459 --dcv 1024
  Doing ahead-of-time memory usage test
  Passed!  Constructing with these parameters: --bmax 1510459 --dcv 1024
Constructing suffix-array element generator
Building DifferenceCoverSample
  Building sPrime
  Building sPrimeOrder
  V-Sorting samples
  V-Sorting samples time: 00:00:00
  Allocating rank array
  Ranking v-sort output
  Ranking v-sort output time: 00:00:00
  Invoking Larsson-Sadakane on ranks
  Invoking Larsson-Sadakane on ranks time: 00:00:00
  Sanity-checking and returning
Building samples
Reserving space for 12 sample suffixes
Generating random suffixes
QSorting 12 sample offsets, eliminating duplicates
QSorting sample offsets, eliminating duplicates time: 00:00:00
Multikey QSorting 12 samples
  (Using difference cover)
  Multikey QSorting samples time: 00:00:00
Calculating bucket sizes
  Binary sorting into buckets
  10%
  20%
  30%
  40%
  50%
  60%
  70%
  80%
  90%
  100%
  Binary sorting into buckets time: 00:00:00
Splitting and merging
  Splitting and merging time: 00:00:00
Split 1, merged 6; iterating...
  Binary sorting into buckets
  10%
  20%
  30%
  40%
  50%
  60%
  70%
  80%
  90%
  100%
  Binary sorting into buckets time: 00:00:01
Splitting and merging
  Splitting and merging time: 00:00:00
Split 1, merged 1; iterating...
  Binary sorting into buckets
  10%
  20%
  30%
  40%
  50%
  60%
  70%
  80%
  90%
  100%
  Binary sorting into buckets time: 00:00:00
Splitting and merging
  Splitting and merging time: 00:00:00
Avg bucket size: 1.00697e+06 (target: 1510458)
Converting suffix-array elements to index image
Allocating ftab, absorbFtab
Entering Ebwt loop
Getting block 1 of 8
  Reserving size (1510459) for bucket
  Calculating Z arrays
  Calculating Z arrays time: 00:00:00
  Entering block accumulator loop:
  10%
  20%
  30%
  40%
  50%
  60%
  70%
  80%
  90%
  100%
  Block accumulator loop time: 00:00:00
  Sorting block of length 648724
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 648725
Getting block 2 of 8
  Reserving size (1510459) for bucket
  Calculating Z arrays
  Calculating Z arrays time: 00:00:00
  Entering block accumulator loop:
  10%
  20%
  30%
  40%
  50%
  60%
  70%
  80%
  90%
  100%
  Block accumulator loop time: 00:00:01
  Sorting block of length 1378629
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 1378630
Getting block 3 of 8
  Reserving size (1510459) for bucket
  Calculating Z arrays
  Calculating Z arrays time: 00:00:00
  Entering block accumulator loop:
  10%
  20%
  30%
  40%
  50%
  60%
  70%
  80%
  90%
  100%
  Block accumulator loop time: 00:00:00
  Sorting block of length 237965
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 237966
Getting block 4 of 8
  Reserving size (1510459) for bucket
  Calculating Z arrays
  Calculating Z arrays time: 00:00:00
  Entering block accumulator loop:
  10%
  20%
  30%
  40%
  50%
  60%
  70%
  80%
  90%
  100%
  Block accumulator loop time: 00:00:00
  Sorting block of length 1459173
  (Using difference cover)
  Sorting block time: 00:00:01
Returning block of 1459174
Getting block 5 of 8
  Reserving size (1510459) for bucket
  Calculating Z arrays
  Calculating Z arrays time: 00:00:00
  Entering block accumulator loop:
  10%
  20%
  30%
  40%
  50%
  60%
  70%
  80%
  90%
  100%
  Block accumulator loop time: 00:00:00
  Sorting block of length 295020
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 295021
Getting block 6 of 8
  Reserving size (1510459) for bucket
  Calculating Z arrays
  Calculating Z arrays time: 00:00:00
  Entering block accumulator loop:
  10%
  20%
  30%
  40%
  50%
  60%
  70%
  80%
  90%
  100%
  Block accumulator loop time: 00:00:00
  Sorting block of length 1480373
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 1480374
Getting block 7 of 8
  Reserving size (1510459) for bucket
  Calculating Z arrays
  Calculating Z arrays time: 00:00:00
  Entering block accumulator loop:
  10%
  20%
  30%
  40%
  50%
  60%
  70%
  80%
  90%
  100%
  Block accumulator loop time: 00:00:00
  Sorting block of length 1164599
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 1164600
Getting block 8 of 8
  Reserving size (1510459) for bucket
  Calculating Z arrays
  Calculating Z arrays time: 00:00:00
  Entering block accumulator loop:
  10%
  20%
  30%
  40%
  50%
  60%
  70%
  80%
  90%
  100%
  Block accumulator loop time: 00:00:00
  Sorting block of length 1391292
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 1391293
Exited Ebwt loop
fchr[A]: 0
fchr[C]: 1332306
fchr[G]: 4026620
fchr[T]: 6721566
fchr[$]: 8055782
Exiting Ebwt::buildToDisk()
Returning from initFromVector
Wrote 6880121 bytes to primary EBWT file: /atium/Data/Nanopore/cpowgs/170816_BUCC/bcc_refs/bcenocepacia.1.bt2
Wrote 2013952 bytes to secondary EBWT file: /atium/Data/Nanopore/cpowgs/170816_BUCC/bcc_refs/bcenocepacia.2.bt2
Re-opening _in1 and _in2 as input streams
Returning from Ebwt constructor
Headers:
    len: 8055782
    bwtLen: 8055783
    sz: 2013946
    bwtSz: 2013946
    lineRate: 6
    offRate: 4
    offMask: 0xfffffff0
    ftabChars: 10
    eftabLen: 20
    eftabSz: 80
    ftabLen: 1048577
    ftabSz: 4194308
    offsLen: 503487
    offsSz: 2013948
    lineSz: 64
    sideSz: 64
    sideBwtSz: 48
    sideBwtLen: 192
    numSides: 41958
    numLines: 41958
    ebwtTotLen: 2685312
    ebwtTotSz: 2685312
    color: 0
    reverse: 0
Total time for call to driver() for forward index: 00:00:06
Reading reference sizes
  Time reading reference sizes: 00:00:00
Calculating joined length
Writing header
Reserving space for joined string
Joining reference sequences
  Time to join reference sequences: 00:00:00
  Time to reverse reference sequence: 00:00:00
bmax according to bmaxDivN setting: 2013945
Using parameters --bmax 1510459 --dcv 1024
  Doing ahead-of-time memory usage test
  Passed!  Constructing with these parameters: --bmax 1510459 --dcv 1024
Constructing suffix-array element generator
Building DifferenceCoverSample
  Building sPrime
  Building sPrimeOrder
  V-Sorting samples
  V-Sorting samples time: 00:00:00
  Allocating rank array
  Ranking v-sort output
  Ranking v-sort output time: 00:00:00
  Invoking Larsson-Sadakane on ranks
  Invoking Larsson-Sadakane on ranks time: 00:00:00
  Sanity-checking and returning
Building samples
Reserving space for 12 sample suffixes
Generating random suffixes
QSorting 12 sample offsets, eliminating duplicates
QSorting sample offsets, eliminating duplicates time: 00:00:00
Multikey QSorting 12 samples
  (Using difference cover)
  Multikey QSorting samples time: 00:00:00
Calculating bucket sizes
  Binary sorting into buckets
  10%
  20%
  30%
  40%
  50%
  60%
  70%
  80%
  90%
  100%
  Binary sorting into buckets time: 00:00:01
Splitting and merging
  Splitting and merging time: 00:00:00
Split 1, merged 7; iterating...
  Binary sorting into buckets
  10%
  20%
  30%
  40%
  50%
  60%
  70%
  80%
  90%
  100%
  Binary sorting into buckets time: 00:00:00
Splitting and merging
  Splitting and merging time: 00:00:00
Split 1, merged 1; iterating...
  Binary sorting into buckets
  10%
  20%
  30%
  40%
  50%
  60%
  70%
  80%
  90%
  100%
  Binary sorting into buckets time: 00:00:01
Splitting and merging
  Splitting and merging time: 00:00:00
Avg bucket size: 1.34263e+06 (target: 1510458)
Converting suffix-array elements to index image
Allocating ftab, absorbFtab
Entering Ebwt loop
Getting block 1 of 6
  Reserving size (1510459) for bucket
  Calculating Z arrays
  Calculating Z arrays time: 00:00:00
  Entering block accumulator loop:
  10%
  20%
  30%
  40%
  50%
  60%
  70%
  80%
  90%
  100%
  Block accumulator loop time: 00:00:00
  Sorting block of length 1459267
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 1459268
Getting block 2 of 6
  Reserving size (1510459) for bucket
  Calculating Z arrays
  Calculating Z arrays time: 00:00:00
  Entering block accumulator loop:
  10%
  20%
  30%
  40%
  50%
  60%
  70%
  80%
  90%
  100%
  Block accumulator loop time: 00:00:00
  Sorting block of length 1209421
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 1209422
Getting block 3 of 6
  Reserving size (1510459) for bucket
  Calculating Z arrays
  Calculating Z arrays time: 00:00:00
  Entering block accumulator loop:
  10%
  20%
  30%
  40%
  50%
  60%
  70%
  80%
  90%
  100%
  Block accumulator loop time: 00:00:00
  Sorting block of length 1186879
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 1186880
Getting block 4 of 6
  Reserving size (1510459) for bucket
  Calculating Z arrays
  Calculating Z arrays time: 00:00:00
  Entering block accumulator loop:
  10%
  20%
  30%
  40%
  50%
  60%
  70%
  80%
  90%
  100%
  Block accumulator loop time: 00:00:00
  Sorting block of length 1255794
  (Using difference cover)
  Sorting block time: 00:00:01
Returning block of 1255795
Getting block 5 of 6
  Reserving size (1510459) for bucket
  Calculating Z arrays
  Calculating Z arrays time: 00:00:00
  Entering block accumulator loop:
  10%
  20%
  30%
  40%
  50%
  60%
  70%
  80%
  90%
  100%
  Block accumulator loop time: 00:00:00
  Sorting block of length 1457814
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 1457815
Getting block 6 of 6
  Reserving size (1510459) for bucket
  Calculating Z arrays
  Calculating Z arrays time: 00:00:00
  Entering block accumulator loop:
  10%
  20%
  30%
  40%
  50%
  60%
  70%
  80%
  90%
  100%
  Block accumulator loop time: 00:00:00
  Sorting block of length 1486602
  (Using difference cover)
  Sorting block time: 00:00:01
Returning block of 1486603
Exited Ebwt loop
fchr[A]: 0
fchr[C]: 1332306
fchr[G]: 4026620
fchr[T]: 6721566
fchr[$]: 8055782
Exiting Ebwt::buildToDisk()
Returning from initFromVector
Wrote 6880121 bytes to primary EBWT file: /atium/Data/Nanopore/cpowgs/170816_BUCC/bcc_refs/bcenocepacia.rev.1.bt2
Wrote 2013952 bytes to secondary EBWT file: /atium/Data/Nanopore/cpowgs/170816_BUCC/bcc_refs/bcenocepacia.rev.2.bt2
Re-opening _in1 and _in2 as input streams
Returning from Ebwt constructor
Headers:
    len: 8055782
    bwtLen: 8055783
    sz: 2013946
    bwtSz: 2013946
    lineRate: 6
    offRate: 4
    offMask: 0xfffffff0
    ftabChars: 10
    eftabLen: 20
    eftabSz: 80
    ftabLen: 1048577
    ftabSz: 4194308
    offsLen: 503487
    offsSz: 2013948
    lineSz: 64
    sideSz: 64
    sideBwtSz: 48
    sideBwtLen: 192
    numSides: 41958
    numLines: 41958
    ebwtTotLen: 2685312
    ebwtTotSz: 2685312
    color: 0
    reverse: 1
Total time for backward call to driver() for mirror index: 00:00:05
Settings:
  Output files: "/atium/Data/Nanopore/cpowgs/170816_BUCC/bcc_refs/bcepacia_170816_BUCC_pilon.*.bt2"
  Line rate: 6 (line is 64 bytes)
  Lines per side: 1 (side is 64 bytes)
  Offset rate: 4 (one in 16)
  FTable chars: 10
  Strings: unpacked
  Max bucket size: default
  Max bucket size, sqrt multiplier: default
  Max bucket size, len divisor: 4
  Difference-cover sample period: 1024
  Endianness: little
  Actual local endianness: little
  Sanity checking: disabled
  Assertions: disabled
  Random seed: 0
  Sizeofs: void*:8, int:4, long:8, size_t:8
Input files DNA, FASTA:
  /atium/Data/Nanopore/cpowgs/170816_BUCC/bcc_refs/bcepacia_170816_BUCC_pilon.fa
Reading reference sizes
  Time reading reference sizes: 00:00:00
Calculating joined length
Writing header
Reserving space for joined string
Joining reference sequences
  Time to join reference sequences: 00:00:00
bmax according to bmaxDivN setting: 2157197
Using parameters --bmax 1617898 --dcv 1024
  Doing ahead-of-time memory usage test
  Passed!  Constructing with these parameters: --bmax 1617898 --dcv 1024
Constructing suffix-array element generator
Building DifferenceCoverSample
  Building sPrime
  Building sPrimeOrder
  V-Sorting samples
  V-Sorting samples time: 00:00:00
  Allocating rank array
  Ranking v-sort output
  Ranking v-sort output time: 00:00:00
  Invoking Larsson-Sadakane on ranks
  Invoking Larsson-Sadakane on ranks time: 00:00:00
  Sanity-checking and returning
Building samples
Reserving space for 12 sample suffixes
Generating random suffixes
QSorting 12 sample offsets, eliminating duplicates
QSorting sample offsets, eliminating duplicates time: 00:00:00
Multikey QSorting 12 samples
  (Using difference cover)
  Multikey QSorting samples time: 00:00:00
Calculating bucket sizes
  Binary sorting into buckets
  10%
  20%
  30%
  40%
  50%
  60%
  70%
  80%
  90%
  100%
  Binary sorting into buckets time: 00:00:01
Splitting and merging
  Splitting and merging time: 00:00:00
Split 1, merged 6; iterating...
  Binary sorting into buckets
  10%
  20%
  30%
  40%
  50%
  60%
  70%
  80%
  90%
  100%
  Binary sorting into buckets time: 00:00:00
Splitting and merging
  Splitting and merging time: 00:00:00
Split 1, merged 0; iterating...
  Binary sorting into buckets
  10%
  20%
  30%
  40%
  50%
  60%
  70%
  80%
  90%
  100%
  Binary sorting into buckets time: 00:00:01
Splitting and merging
  Splitting and merging time: 00:00:00
Split 1, merged 1; iterating...
  Binary sorting into buckets
  10%
  20%
  30%
  40%
  50%
  60%
  70%
  80%
  90%
  100%
  Binary sorting into buckets time: 00:00:00
Splitting and merging
  Splitting and merging time: 00:00:00
Avg bucket size: 1.0786e+06 (target: 1617897)
Converting suffix-array elements to index image
Allocating ftab, absorbFtab
Entering Ebwt loop
Getting block 1 of 8
  Reserving size (1617898) for bucket
  Calculating Z arrays
  Calculating Z arrays time: 00:00:00
  Entering block accumulator loop:
  10%
  20%
  30%
  40%
  50%
  60%
  70%
  80%
  90%
  100%
  Block accumulator loop time: 00:00:00
  Sorting block of length 539994
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 539995
Getting block 2 of 8
  Reserving size (1617898) for bucket
  Calculating Z arrays
  Calculating Z arrays time: 00:00:00
  Entering block accumulator loop:
  10%
  20%
  30%
  40%
  50%
  60%
  70%
  80%
  90%
  100%
  Block accumulator loop time: 00:00:01
  Sorting block of length 1271783
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 1271784
Getting block 3 of 8
  Reserving size (1617898) for bucket
  Calculating Z arrays
  Calculating Z arrays time: 00:00:00
  Entering block accumulator loop:
  10%
  20%
  30%
  40%
  50%
  60%
  70%
  80%
  90%
  100%
  Block accumulator loop time: 00:00:00
  Sorting block of length 1246761
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 1246762
Getting block 4 of 8
  Reserving size (1617898) for bucket
  Calculating Z arrays
  Calculating Z arrays time: 00:00:00
  Entering block accumulator loop:
  10%
  20%
  30%
  40%
  50%
  60%
  70%
  80%
  90%
  100%
  Block accumulator loop time: 00:00:01
  Sorting block of length 726855
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 726856
Getting block 5 of 8
  Reserving size (1617898) for bucket
  Calculating Z arrays
  Calculating Z arrays time: 00:00:00
  Entering block accumulator loop:
  10%
  20%
  30%
  40%
  50%
  60%
  70%
  80%
  90%
  100%
  Block accumulator loop time: 00:00:00
  Sorting block of length 1188487
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 1188488
Getting block 6 of 8
  Reserving size (1617898) for bucket
  Calculating Z arrays
  Calculating Z arrays time: 00:00:00
  Entering block accumulator loop:
  10%
  20%
  30%
  40%
  50%
  60%
  70%
  80%
  90%
  100%
  Block accumulator loop time: 00:00:01
  Sorting block of length 1119932
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 1119933
Getting block 7 of 8
  Reserving size (1617898) for bucket
  Calculating Z arrays
  Calculating Z arrays time: 00:00:00
  Entering block accumulator loop:
  10%
  20%
  30%
  40%
  50%
  60%
  70%
  80%
  90%
  100%
  Block accumulator loop time: 00:00:00
  Sorting block of length 1165436
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 1165437
Getting block 8 of 8
  Reserving size (1617898) for bucket
  Calculating Z arrays
  Calculating Z arrays time: 00:00:00
  Entering block accumulator loop:
  10%
  20%
  30%
  40%
  50%
  60%
  70%
  80%
  90%
  100%
  Block accumulator loop time: 00:00:01
  Sorting block of length 1369536
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 1369537
Exited Ebwt loop
fchr[A]: 0
fchr[C]: 1446731
fchr[G]: 4310263
fchr[T]: 7182351
fchr[$]: 8628791
Exiting Ebwt::buildToDisk()
Returning from initFromVector
Wrote 7070941 bytes to primary EBWT file: /atium/Data/Nanopore/cpowgs/170816_BUCC/bcc_refs/bcepacia_170816_BUCC_pilon.1.bt2
Wrote 2157204 bytes to secondary EBWT file: /atium/Data/Nanopore/cpowgs/170816_BUCC/bcc_refs/bcepacia_170816_BUCC_pilon.2.bt2
Re-opening _in1 and _in2 as input streams
Returning from Ebwt constructor
Headers:
    len: 8628791
    bwtLen: 8628792
    sz: 2157198
    bwtSz: 2157198
    lineRate: 6
    offRate: 4
    offMask: 0xfffffff0
    ftabChars: 10
    eftabLen: 20
    eftabSz: 80
    ftabLen: 1048577
    ftabSz: 4194308
    offsLen: 539300
    offsSz: 2157200
    lineSz: 64
    sideSz: 64
    sideBwtSz: 48
    sideBwtLen: 192
    numSides: 44942
    numLines: 44942
    ebwtTotLen: 2876288
    ebwtTotSz: 2876288
    color: 0
    reverse: 0
Total time for call to driver() for forward index: 00:00:06
Reading reference sizes
  Time reading reference sizes: 00:00:00
Calculating joined length
Writing header
Reserving space for joined string
Joining reference sequences
  Time to join reference sequences: 00:00:00
  Time to reverse reference sequence: 00:00:00
bmax according to bmaxDivN setting: 2157197
Using parameters --bmax 1617898 --dcv 1024
  Doing ahead-of-time memory usage test
  Passed!  Constructing with these parameters: --bmax 1617898 --dcv 1024
Constructing suffix-array element generator
Building DifferenceCoverSample
  Building sPrime
  Building sPrimeOrder
  V-Sorting samples
  V-Sorting samples time: 00:00:00
  Allocating rank array
  Ranking v-sort output
  Ranking v-sort output time: 00:00:00
  Invoking Larsson-Sadakane on ranks
  Invoking Larsson-Sadakane on ranks time: 00:00:01
  Sanity-checking and returning
Building samples
Reserving space for 12 sample suffixes
Generating random suffixes
QSorting 12 sample offsets, eliminating duplicates
QSorting sample offsets, eliminating duplicates time: 00:00:00
Multikey QSorting 12 samples
  (Using difference cover)
  Multikey QSorting samples time: 00:00:00
Calculating bucket sizes
  Binary sorting into buckets
  10%
  20%
  30%
  40%
  50%
  60%
  70%
  80%
  90%
  100%
  Binary sorting into buckets time: 00:00:00
Splitting and merging
  Splitting and merging time: 00:00:00
Avg bucket size: 1.23268e+06 (target: 1617897)
Converting suffix-array elements to index image
Allocating ftab, absorbFtab
Entering Ebwt loop
Getting block 1 of 7
  Reserving size (1617898) for bucket
  Calculating Z arrays
  Calculating Z arrays time: 00:00:00
  Entering block accumulator loop:
  10%
  20%
  30%
  40%
  50%
  60%
  70%
  80%
  90%
  100%
  Block accumulator loop time: 00:00:00
  Sorting block of length 1475627
  (Using difference cover)
  Sorting block time: 00:00:01
Returning block of 1475628
Getting block 2 of 7
  Reserving size (1617898) for bucket
  Calculating Z arrays
  Calculating Z arrays time: 00:00:00
  Entering block accumulator loop:
  10%
  20%
  30%
  40%
  50%
  60%
  70%
  80%
  90%
  100%
  Block accumulator loop time: 00:00:00
  Sorting block of length 1438915
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 1438916
Getting block 3 of 7
  Reserving size (1617898) for bucket
  Calculating Z arrays
  Calculating Z arrays time: 00:00:00
  Entering block accumulator loop:
  10%
  20%
  30%
  40%
  50%
  60%
  70%
  80%
  90%
  100%
  Block accumulator loop time: 00:00:00
  Sorting block of length 793984
  (Using difference cover)
  Sorting block time: 00:00:01
Returning block of 793985
Getting block 4 of 7
  Reserving size (1617898) for bucket
  Calculating Z arrays
  Calculating Z arrays time: 00:00:00
  Entering block accumulator loop:
  10%
  20%
  30%
  40%
  50%
  60%
  70%
  80%
  90%
  100%
  Block accumulator loop time: 00:00:00
  Sorting block of length 1598087
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 1598088
Getting block 5 of 7
  Reserving size (1617898) for bucket
  Calculating Z arrays
  Calculating Z arrays time: 00:00:00
  Entering block accumulator loop:
  10%
  20%
  30%
  40%
  50%
  60%
  70%
  80%
  90%
  100%
  Block accumulator loop time: 00:00:01
  Sorting block of length 1363362
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 1363363
Getting block 6 of 7
  Reserving size (1617898) for bucket
  Calculating Z arrays
  Calculating Z arrays time: 00:00:00
  Entering block accumulator loop:
  10%
  20%
  30%
  40%
  50%
  60%
  70%
  80%
  90%
  100%
  Block accumulator loop time: 00:00:00
  Sorting block of length 1430700
  (Using difference cover)
  Sorting block time: 00:00:01
Returning block of 1430701
Getting block 7 of 7
  Reserving size (1617898) for bucket
  Calculating Z arrays
  Calculating Z arrays time: 00:00:00
  Entering block accumulator loop:
  10%
  20%
  30%
  40%
  50%
  60%
  70%
  80%
  90%
  100%
  Block accumulator loop time: 00:00:00
  Sorting block of length 528110
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 528111
Exited Ebwt loop
fchr[A]: 0
fchr[C]: 1446731
fchr[G]: 4310263
fchr[T]: 7182351
fchr[$]: 8628791
Exiting Ebwt::buildToDisk()
Returning from initFromVector
Wrote 7070941 bytes to primary EBWT file: /atium/Data/Nanopore/cpowgs/170816_BUCC/bcc_refs/bcepacia_170816_BUCC_pilon.rev.1.bt2
Wrote 2157204 bytes to secondary EBWT file: /atium/Data/Nanopore/cpowgs/170816_BUCC/bcc_refs/bcepacia_170816_BUCC_pilon.rev.2.bt2
Re-opening _in1 and _in2 as input streams
Returning from Ebwt constructor
Headers:
    len: 8628791
    bwtLen: 8628792
    sz: 2157198
    bwtSz: 2157198
    lineRate: 6
    offRate: 4
    offMask: 0xfffffff0
    ftabChars: 10
    eftabLen: 20
    eftabSz: 80
    ftabLen: 1048577
    ftabSz: 4194308
    offsLen: 539300
    offsSz: 2157200
    lineSz: 64
    sideSz: 64
    sideBwtSz: 48
    sideBwtLen: 192
    numSides: 44942
    numLines: 44942
    ebwtTotLen: 2876288
    ebwtTotSz: 2876288
    color: 0
    reverse: 1
Total time for backward call to driver() for mirror index: 00:00:05
Settings:
  Output files: "/atium/Data/Nanopore/cpowgs/170816_BUCC/bcc_refs/bcepacia_ATCC25416.*.bt2"
  Line rate: 6 (line is 64 bytes)
  Lines per side: 1 (side is 64 bytes)
  Offset rate: 4 (one in 16)
  FTable chars: 10
  Strings: unpacked
  Max bucket size: default
  Max bucket size, sqrt multiplier: default
  Max bucket size, len divisor: 4
  Difference-cover sample period: 1024
  Endianness: little
  Actual local endianness: little
  Sanity checking: disabled
  Assertions: disabled
  Random seed: 0
  Sizeofs: void*:8, int:4, long:8, size_t:8
Input files DNA, FASTA:
  /atium/Data/Nanopore/cpowgs/170816_BUCC/bcc_refs/bcepacia_ATCC25416.fa
Reading reference sizes
  Time reading reference sizes: 00:00:00
Calculating joined length
Writing header
Reserving space for joined string
Joining reference sequences
  Time to join reference sequences: 00:00:00
bmax according to bmaxDivN setting: 2151486
Using parameters --bmax 1613615 --dcv 1024
  Doing ahead-of-time memory usage test
  Passed!  Constructing with these parameters: --bmax 1613615 --dcv 1024
Constructing suffix-array element generator
Building DifferenceCoverSample
  Building sPrime
  Building sPrimeOrder
  V-Sorting samples
  V-Sorting samples time: 00:00:00
  Allocating rank array
  Ranking v-sort output
  Ranking v-sort output time: 00:00:00
  Invoking Larsson-Sadakane on ranks
  Invoking Larsson-Sadakane on ranks time: 00:00:00
  Sanity-checking and returning
Building samples
Reserving space for 12 sample suffixes
Generating random suffixes
QSorting 12 sample offsets, eliminating duplicates
QSorting sample offsets, eliminating duplicates time: 00:00:00
Multikey QSorting 12 samples
  (Using difference cover)
  Multikey QSorting samples time: 00:00:00
Calculating bucket sizes
  Binary sorting into buckets
  10%
  20%
  30%
  40%
  50%
  60%
  70%
  80%
  90%
  100%
  Binary sorting into buckets time: 00:00:01
Splitting and merging
  Splitting and merging time: 00:00:00
Avg bucket size: 1.22942e+06 (target: 1613614)
Converting suffix-array elements to index image
Allocating ftab, absorbFtab
Entering Ebwt loop
Getting block 1 of 7
  Reserving size (1613615) for bucket
  Calculating Z arrays
  Calculating Z arrays time: 00:00:00
  Entering block accumulator loop:
  10%
  20%
  30%
  40%
  50%
  60%
  70%
  80%
  90%
  100%
  Block accumulator loop time: 00:00:00
  Sorting block of length 1583634
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 1583635
Getting block 2 of 7
  Reserving size (1613615) for bucket
  Calculating Z arrays
  Calculating Z arrays time: 00:00:00
  Entering block accumulator loop:
  10%
  20%
  30%
  40%
  50%
  60%
  70%
  80%
  90%
  100%
  Block accumulator loop time: 00:00:00
  Sorting block of length 927670
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 927671
Getting block 3 of 7
  Reserving size (1613615) for bucket
  Calculating Z arrays
  Calculating Z arrays time: 00:00:00
  Entering block accumulator loop:
  10%
  20%
  30%
  40%
  50%
  60%
  70%
  80%
  90%
  100%
  Block accumulator loop time: 00:00:00
  Sorting block of length 1359193
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 1359194
Getting block 4 of 7
  Reserving size (1613615) for bucket
  Calculating Z arrays
  Calculating Z arrays time: 00:00:00
  Entering block accumulator loop:
  10%
  20%
  30%
  40%
  50%
  60%
  70%
  80%
  90%
  100%
  Block accumulator loop time: 00:00:00
  Sorting block of length 392997
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 392998
Getting block 5 of 7
  Reserving size (1613615) for bucket
  Calculating Z arrays
  Calculating Z arrays time: 00:00:00
  Entering block accumulator loop:
  10%
  20%
  30%
  40%
  50%
  60%
  70%
  80%
  90%
  100%
  Block accumulator loop time: 00:00:01
  Sorting block of length 1455735
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 1455736
Getting block 6 of 7
  Reserving size (1613615) for bucket
  Calculating Z arrays
  Calculating Z arrays time: 00:00:00
  Entering block accumulator loop:
  10%
  20%
  30%
  40%
  50%
  60%
  70%
  80%
  90%
  100%
  Block accumulator loop time: 00:00:00
  Sorting block of length 1539899
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 1539900
Getting block 7 of 7
  Reserving size (1613615) for bucket
  Calculating Z arrays
  Calculating Z arrays time: 00:00:00
  Entering block accumulator loop:
  10%
  20%
  30%
  40%
  50%
  60%
  70%
  80%
  90%
  100%
  Block accumulator loop time: 00:00:00
  Sorting block of length 1346811
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 1346812
Exited Ebwt loop
fchr[A]: 0
fchr[C]: 1435428
fchr[G]: 4302011
fchr[T]: 7167840
fchr[$]: 8605945
Exiting Ebwt::buildToDisk()
Returning from initFromVector
Wrote 7063501 bytes to primary EBWT file: /atium/Data/Nanopore/cpowgs/170816_BUCC/bcc_refs/bcepacia_ATCC25416.1.bt2
Wrote 2151492 bytes to secondary EBWT file: /atium/Data/Nanopore/cpowgs/170816_BUCC/bcc_refs/bcepacia_ATCC25416.2.bt2
Re-opening _in1 and _in2 as input streams
Returning from Ebwt constructor
Headers:
    len: 8605945
    bwtLen: 8605946
    sz: 2151487
    bwtSz: 2151487
    lineRate: 6
    offRate: 4
    offMask: 0xfffffff0
    ftabChars: 10
    eftabLen: 20
    eftabSz: 80
    ftabLen: 1048577
    ftabSz: 4194308
    offsLen: 537872
    offsSz: 2151488
    lineSz: 64
    sideSz: 64
    sideBwtSz: 48
    sideBwtLen: 192
    numSides: 44823
    numLines: 44823
    ebwtTotLen: 2868672
    ebwtTotSz: 2868672
    color: 0
    reverse: 0
Total time for call to driver() for forward index: 00:00:04
Reading reference sizes
  Time reading reference sizes: 00:00:00
Calculating joined length
Writing header
Reserving space for joined string
Joining reference sequences
  Time to join reference sequences: 00:00:00
  Time to reverse reference sequence: 00:00:00
bmax according to bmaxDivN setting: 2151486
Using parameters --bmax 1613615 --dcv 1024
  Doing ahead-of-time memory usage test
  Passed!  Constructing with these parameters: --bmax 1613615 --dcv 1024
Constructing suffix-array element generator
Building DifferenceCoverSample
  Building sPrime
  Building sPrimeOrder
  V-Sorting samples
  V-Sorting samples time: 00:00:01
  Allocating rank array
  Ranking v-sort output
  Ranking v-sort output time: 00:00:00
  Invoking Larsson-Sadakane on ranks
  Invoking Larsson-Sadakane on ranks time: 00:00:00
  Sanity-checking and returning
Building samples
Reserving space for 12 sample suffixes
Generating random suffixes
QSorting 12 sample offsets, eliminating duplicates
QSorting sample offsets, eliminating duplicates time: 00:00:00
Multikey QSorting 12 samples
  (Using difference cover)
  Multikey QSorting samples time: 00:00:00
Calculating bucket sizes
  Binary sorting into buckets
  10%
  20%
  30%
  40%
  50%
  60%
  70%
  80%
  90%
  100%
  Binary sorting into buckets time: 00:00:00
Splitting and merging
  Splitting and merging time: 00:00:00
Avg bucket size: 1.22942e+06 (target: 1613614)
Converting suffix-array elements to index image
Allocating ftab, absorbFtab
Entering Ebwt loop
Getting block 1 of 7
  Reserving size (1613615) for bucket
  Calculating Z arrays
  Calculating Z arrays time: 00:00:00
  Entering block accumulator loop:
  10%
  20%
  30%
  40%
  50%
  60%
  70%
  80%
  90%
  100%
  Block accumulator loop time: 00:00:00
  Sorting block of length 1547325
  (Using difference cover)
  Sorting block time: 00:00:01
Returning block of 1547326
Getting block 2 of 7
  Reserving size (1613615) for bucket
  Calculating Z arrays
  Calculating Z arrays time: 00:00:00
  Entering block accumulator loop:
  10%
  20%
  30%
  40%
  50%
  60%
  70%
  80%
  90%
  100%
  Block accumulator loop time: 00:00:00
  Sorting block of length 1553732
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 1553733
Getting block 3 of 7
  Reserving size (1613615) for bucket
  Calculating Z arrays
  Calculating Z arrays time: 00:00:00
  Entering block accumulator loop:
  10%
  20%
  30%
  40%
  50%
  60%
  70%
  80%
  90%
  100%
  Block accumulator loop time: 00:00:01
  Sorting block of length 861458
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 861459
Getting block 4 of 7
  Reserving size (1613615) for bucket
  Calculating Z arrays
  Calculating Z arrays time: 00:00:00
  Entering block accumulator loop:
  10%
  20%
  30%
  40%
  50%
  60%
  70%
  80%
  90%
  100%
  Block accumulator loop time: 00:00:00
  Sorting block of length 1087534
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 1087535
Getting block 5 of 7
  Reserving size (1613615) for bucket
  Calculating Z arrays
  Calculating Z arrays time: 00:00:00
  Entering block accumulator loop:
  10%
  20%
  30%
  40%
  50%
  60%
  70%
  80%
  90%
  100%
  Block accumulator loop time: 00:00:00
  Sorting block of length 1387063
  (Using difference cover)
  Sorting block time: 00:00:01
Returning block of 1387064
Getting block 6 of 7
  Reserving size (1613615) for bucket
  Calculating Z arrays
  Calculating Z arrays time: 00:00:00
  Entering block accumulator loop:
  10%
  20%
  30%
  40%
  50%
  60%
  70%
  80%
  90%
  100%
  Block accumulator loop time: 00:00:00
  Sorting block of length 641829
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 641830
Getting block 7 of 7
  Reserving size (1613615) for bucket
  Calculating Z arrays
  Calculating Z arrays time: 00:00:00
  Entering block accumulator loop:
  10%
  20%
  30%
  40%
  50%
  60%
  70%
  80%
  90%
  100%
  Block accumulator loop time: 00:00:00
  Sorting block of length 1526998
  (Using difference cover)
  Sorting block time: 00:00:01
Returning block of 1526999
Exited Ebwt loop
fchr[A]: 0
fchr[C]: 1435428
fchr[G]: 4302011
fchr[T]: 7167840
fchr[$]: 8605945
Exiting Ebwt::buildToDisk()
Returning from initFromVector
Wrote 7063501 bytes to primary EBWT file: /atium/Data/Nanopore/cpowgs/170816_BUCC/bcc_refs/bcepacia_ATCC25416.rev.1.bt2
Wrote 2151492 bytes to secondary EBWT file: /atium/Data/Nanopore/cpowgs/170816_BUCC/bcc_refs/bcepacia_ATCC25416.rev.2.bt2
Re-opening _in1 and _in2 as input streams
Returning from Ebwt constructor
Headers:
    len: 8605945
    bwtLen: 8605946
    sz: 2151487
    bwtSz: 2151487
    lineRate: 6
    offRate: 4
    offMask: 0xfffffff0
    ftabChars: 10
    eftabLen: 20
    eftabSz: 80
    ftabLen: 1048577
    ftabSz: 4194308
    offsLen: 537872
    offsSz: 2151488
    lineSz: 64
    sideSz: 64
    sideBwtSz: 48
    sideBwtLen: 192
    numSides: 44823
    numLines: 44823
    ebwtTotLen: 2868672
    ebwtTotSz: 2868672
    color: 0
    reverse: 1
Total time for backward call to driver() for mirror index: 00:00:05
Settings:
  Output files: "/atium/Data/Nanopore/cpowgs/170816_BUCC/bcc_refs/bcontaminans.*.bt2"
  Line rate: 6 (line is 64 bytes)
  Lines per side: 1 (side is 64 bytes)
  Offset rate: 4 (one in 16)
  FTable chars: 10
  Strings: unpacked
  Max bucket size: default
  Max bucket size, sqrt multiplier: default
  Max bucket size, len divisor: 4
  Difference-cover sample period: 1024
  Endianness: little
  Actual local endianness: little
  Sanity checking: disabled
  Assertions: disabled
  Random seed: 0
  Sizeofs: void*:8, int:4, long:8, size_t:8
Input files DNA, FASTA:
  /atium/Data/Nanopore/cpowgs/170816_BUCC/bcc_refs/bcontaminans.fa
Reading reference sizes
  Time reading reference sizes: 00:00:00
Calculating joined length
Writing header
Reserving space for joined string
Joining reference sequences
  Time to join reference sequences: 00:00:00
bmax according to bmaxDivN setting: 2127311
Using parameters --bmax 1595484 --dcv 1024
  Doing ahead-of-time memory usage test
  Passed!  Constructing with these parameters: --bmax 1595484 --dcv 1024
Constructing suffix-array element generator
Building DifferenceCoverSample
  Building sPrime
  Building sPrimeOrder
  V-Sorting samples
  V-Sorting samples time: 00:00:00
  Allocating rank array
  Ranking v-sort output
  Ranking v-sort output time: 00:00:00
  Invoking Larsson-Sadakane on ranks
  Invoking Larsson-Sadakane on ranks time: 00:00:00
  Sanity-checking and returning
Building samples
Reserving space for 12 sample suffixes
Generating random suffixes
QSorting 12 sample offsets, eliminating duplicates
QSorting sample offsets, eliminating duplicates time: 00:00:00
Multikey QSorting 12 samples
  (Using difference cover)
  Multikey QSorting samples time: 00:00:00
Calculating bucket sizes
  Binary sorting into buckets
  10%
  20%
  30%
  40%
  50%
  60%
  70%
  80%
  90%
  100%
  Binary sorting into buckets time: 00:00:01
Splitting and merging
  Splitting and merging time: 00:00:00
Split 1, merged 7; iterating...
  Binary sorting into buckets
  10%
  20%
  30%
  40%
  50%
  60%
  70%
  80%
  90%
  100%
  Binary sorting into buckets time: 00:00:00
Splitting and merging
  Splitting and merging time: 00:00:00
Split 1, merged 0; iterating...
  Binary sorting into buckets
  10%
  20%
  30%
  40%
  50%
  60%
  70%
  80%
  90%
  100%
  Binary sorting into buckets time: 00:00:00
Splitting and merging
  Splitting and merging time: 00:00:00
Avg bucket size: 1.21561e+06 (target: 1595483)
Converting suffix-array elements to index image
Allocating ftab, absorbFtab
Entering Ebwt loop
Getting block 1 of 7
  Reserving size (1595484) for bucket
  Calculating Z arrays
  Calculating Z arrays time: 00:00:00
  Entering block accumulator loop:
  10%
  20%
  30%
  40%
  50%
  60%
  70%
  80%
  90%
  100%
  Block accumulator loop time: 00:00:01
  Sorting block of length 1591934
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 1591935
Getting block 2 of 7
  Reserving size (1595484) for bucket
  Calculating Z arrays
  Calculating Z arrays time: 00:00:00
  Entering block accumulator loop:
  10%
  20%
  30%
  40%
  50%
  60%
  70%
  80%
  90%
  100%
  Block accumulator loop time: 00:00:00
  Sorting block of length 1262281
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 1262282
Getting block 3 of 7
  Reserving size (1595484) for bucket
  Calculating Z arrays
  Calculating Z arrays time: 00:00:00
  Entering block accumulator loop:
  10%
  20%
  30%
  40%
  50%
  60%
  70%
  80%
  90%
  100%
  Block accumulator loop time: 00:00:00
  Sorting block of length 1510644
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 1510645
Getting block 4 of 7
  Reserving size (1595484) for bucket
  Calculating Z arrays
  Calculating Z arrays time: 00:00:00
  Entering block accumulator loop:
  10%
  20%
  30%
  40%
  50%
  60%
  70%
  80%
  90%
  100%
  Block accumulator loop time: 00:00:00
  Sorting block of length 1204621
  (Using difference cover)
  Sorting block time: 00:00:01
Returning block of 1204622
Getting block 5 of 7
  Reserving size (1595484) for bucket
  Calculating Z arrays
  Calculating Z arrays time: 00:00:00
  Entering block accumulator loop:
  10%
  20%
  30%
  40%
  50%
  60%
  70%
  80%
  90%
  100%
  Block accumulator loop time: 00:00:00
  Sorting block of length 657673
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 657674
Getting block 6 of 7
  Reserving size (1595484) for bucket
  Calculating Z arrays
  Calculating Z arrays time: 00:00:00
  Entering block accumulator loop:
  10%
  20%
  30%
  40%
  50%
  60%
  70%
  80%
  90%
  100%
  Block accumulator loop time: 00:00:00
  Sorting block of length 1572066
  (Using difference cover)
  Sorting block time: 00:00:01
Returning block of 1572067
Getting block 7 of 7
  Reserving size (1595484) for bucket
  Calculating Z arrays
  Calculating Z arrays time: 00:00:00
  Entering block accumulator loop:
  10%
  20%
  30%
  40%
  50%
  60%
  70%
  80%
  90%
  100%
  Block accumulator loop time: 00:00:00
  Sorting block of length 710022
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 710023
Exited Ebwt loop
fchr[A]: 0
fchr[C]: 1435651
fchr[G]: 4292567
fchr[T]: 7083728
fchr[$]: 8509247
Exiting Ebwt::buildToDisk()
Returning from initFromVector
Wrote 7031174 bytes to primary EBWT file: /atium/Data/Nanopore/cpowgs/170816_BUCC/bcc_refs/bcontaminans.1.bt2
Wrote 2127316 bytes to secondary EBWT file: /atium/Data/Nanopore/cpowgs/170816_BUCC/bcc_refs/bcontaminans.2.bt2
Re-opening _in1 and _in2 as input streams
Returning from Ebwt constructor
Headers:
    len: 8509247
    bwtLen: 8509248
    sz: 2127312
    bwtSz: 2127312
    lineRate: 6
    offRate: 4
    offMask: 0xfffffff0
    ftabChars: 10
    eftabLen: 20
    eftabSz: 80
    ftabLen: 1048577
    ftabSz: 4194308
    offsLen: 531828
    offsSz: 2127312
    lineSz: 64
    sideSz: 64
    sideBwtSz: 48
    sideBwtLen: 192
    numSides: 44319
    numLines: 44319
    ebwtTotLen: 2836416
    ebwtTotSz: 2836416
    color: 0
    reverse: 0
Total time for call to driver() for forward index: 00:00:05
Reading reference sizes
  Time reading reference sizes: 00:00:00
Calculating joined length
Writing header
Reserving space for joined string
Joining reference sequences
  Time to join reference sequences: 00:00:00
  Time to reverse reference sequence: 00:00:00
bmax according to bmaxDivN setting: 2127311
Using parameters --bmax 1595484 --dcv 1024
  Doing ahead-of-time memory usage test
  Passed!  Constructing with these parameters: --bmax 1595484 --dcv 1024
Constructing suffix-array element generator
Building DifferenceCoverSample
  Building sPrime
  Building sPrimeOrder
  V-Sorting samples
  V-Sorting samples time: 00:00:01
  Allocating rank array
  Ranking v-sort output
  Ranking v-sort output time: 00:00:00
  Invoking Larsson-Sadakane on ranks
  Invoking Larsson-Sadakane on ranks time: 00:00:00
  Sanity-checking and returning
Building samples
Reserving space for 12 sample suffixes
Generating random suffixes
QSorting 12 sample offsets, eliminating duplicates
QSorting sample offsets, eliminating duplicates time: 00:00:00
Multikey QSorting 12 samples
  (Using difference cover)
  Multikey QSorting samples time: 00:00:00
Calculating bucket sizes
  Binary sorting into buckets
  10%
  20%
  30%
  40%
  50%
  60%
  70%
  80%
  90%
  100%
  Binary sorting into buckets time: 00:00:00
Splitting and merging
  Splitting and merging time: 00:00:00
Split 1, merged 6; iterating...
  Binary sorting into buckets
  10%
  20%
  30%
  40%
  50%
  60%
  70%
  80%
  90%
  100%
  Binary sorting into buckets time: 00:00:01
Splitting and merging
  Splitting and merging time: 00:00:00
Avg bucket size: 1.21561e+06 (target: 1595483)
Converting suffix-array elements to index image
Allocating ftab, absorbFtab
Entering Ebwt loop
Getting block 1 of 7
  Reserving size (1595484) for bucket
  Calculating Z arrays
  Calculating Z arrays time: 00:00:00
  Entering block accumulator loop:
  10%
  20%
  30%
  40%
  50%
  60%
  70%
  80%
  90%
  100%
  Block accumulator loop time: 00:00:00
  Sorting block of length 1428163
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 1428164
Getting block 2 of 7
  Reserving size (1595484) for bucket
  Calculating Z arrays
  Calculating Z arrays time: 00:00:00
  Entering block accumulator loop:
  10%
  20%
  30%
  40%
  50%
  60%
  70%
  80%
  90%
  100%
  Block accumulator loop time: 00:00:00
  Sorting block of length 921611
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 921612
Getting block 3 of 7
  Reserving size (1595484) for bucket
  Calculating Z arrays
  Calculating Z arrays time: 00:00:00
  Entering block accumulator loop:
  10%
  20%
  30%
  40%
  50%
  60%
  70%
  80%
  90%
  100%
  Block accumulator loop time: 00:00:01
  Sorting block of length 1314424
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 1314425
Getting block 4 of 7
  Reserving size (1595484) for bucket
  Calculating Z arrays
  Calculating Z arrays time: 00:00:00
  Entering block accumulator loop:
  10%
  20%
  30%
  40%
  50%
  60%
  70%
  80%
  90%
  100%
  Block accumulator loop time: 00:00:00
  Sorting block of length 1450188
  (Using difference cover)
  Sorting block time: 00:00:01
Returning block of 1450189
Getting block 5 of 7
  Reserving size (1595484) for bucket
  Calculating Z arrays
  Calculating Z arrays time: 00:00:00
  Entering block accumulator loop:
  10%
  20%
  30%
  40%
  50%
  60%
  70%
  80%
  90%
  100%
  Block accumulator loop time: 00:00:00
  Sorting block of length 1230576
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 1230577
Getting block 6 of 7
  Reserving size (1595484) for bucket
  Calculating Z arrays
  Calculating Z arrays time: 00:00:00
  Entering block accumulator loop:
  10%
  20%
  30%
  40%
  50%
  60%
  70%
  80%
  90%
  100%
  Block accumulator loop time: 00:00:00
  Sorting block of length 633908
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 633909
Getting block 7 of 7
  Reserving size (1595484) for bucket
  Calculating Z arrays
  Calculating Z arrays time: 00:00:00
  Entering block accumulator loop:
  10%
  20%
  30%
  40%
  50%
  60%
  70%
  80%
  90%
  100%
  Block accumulator loop time: 00:00:00
  Sorting block of length 1530371
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 1530372
Exited Ebwt loop
fchr[A]: 0
fchr[C]: 1435651
fchr[G]: 4292567
fchr[T]: 7083728
fchr[$]: 8509247
Exiting Ebwt::buildToDisk()
Returning from initFromVector
Wrote 7031174 bytes to primary EBWT file: /atium/Data/Nanopore/cpowgs/170816_BUCC/bcc_refs/bcontaminans.rev.1.bt2
Wrote 2127316 bytes to secondary EBWT file: /atium/Data/Nanopore/cpowgs/170816_BUCC/bcc_refs/bcontaminans.rev.2.bt2
Re-opening _in1 and _in2 as input streams
Returning from Ebwt constructor
Headers:
    len: 8509247
    bwtLen: 8509248
    sz: 2127312
    bwtSz: 2127312
    lineRate: 6
    offRate: 4
    offMask: 0xfffffff0
    ftabChars: 10
    eftabLen: 20
    eftabSz: 80
    ftabLen: 1048577
    ftabSz: 4194308
    offsLen: 531828
    offsSz: 2127312
    lineSz: 64
    sideSz: 64
    sideBwtSz: 48
    sideBwtLen: 192
    numSides: 44319
    numLines: 44319
    ebwtTotLen: 2836416
    ebwtTotSz: 2836416
    color: 0
    reverse: 1
Total time for backward call to driver() for mirror index: 00:00:05
Settings:
  Output files: "/atium/Data/Nanopore/cpowgs/170816_BUCC/bcc_refs/bdiffusa.*.bt2"
  Line rate: 6 (line is 64 bytes)
  Lines per side: 1 (side is 64 bytes)
  Offset rate: 4 (one in 16)
  FTable chars: 10
  Strings: unpacked
  Max bucket size: default
  Max bucket size, sqrt multiplier: default
  Max bucket size, len divisor: 4
  Difference-cover sample period: 1024
  Endianness: little
  Actual local endianness: little
  Sanity checking: disabled
  Assertions: disabled
  Random seed: 0
  Sizeofs: void*:8, int:4, long:8, size_t:8
Input files DNA, FASTA:
  /atium/Data/Nanopore/cpowgs/170816_BUCC/bcc_refs/bdiffusa.fa
Reading reference sizes
  Time reading reference sizes: 00:00:00
Calculating joined length
Writing header
Reserving space for joined string
Joining reference sequences
  Time to join reference sequences: 00:00:00
bmax according to bmaxDivN setting: 1714458
Using parameters --bmax 1285844 --dcv 1024
  Doing ahead-of-time memory usage test
  Passed!  Constructing with these parameters: --bmax 1285844 --dcv 1024
Constructing suffix-array element generator
Building DifferenceCoverSample
  Building sPrime
  Building sPrimeOrder
  V-Sorting samples
  V-Sorting samples time: 00:00:00
  Allocating rank array
  Ranking v-sort output
  Ranking v-sort output time: 00:00:00
  Invoking Larsson-Sadakane on ranks
  Invoking Larsson-Sadakane on ranks time: 00:00:00
  Sanity-checking and returning
Building samples
Reserving space for 12 sample suffixes
Generating random suffixes
QSorting 12 sample offsets, eliminating duplicates
QSorting sample offsets, eliminating duplicates time: 00:00:00
Multikey QSorting 12 samples
  (Using difference cover)
  Multikey QSorting samples time: 00:00:00
Calculating bucket sizes
  Binary sorting into buckets
  10%
  20%
  30%
  40%
  50%
  60%
  70%
  80%
  90%
  100%
  Binary sorting into buckets time: 00:00:00
Splitting and merging
  Splitting and merging time: 00:00:00
Split 2, merged 6; iterating...
  Binary sorting into buckets
  10%
  20%
  30%
  40%
  50%
  60%
  70%
  80%
  90%
  100%
  Binary sorting into buckets time: 00:00:01
Splitting and merging
  Splitting and merging time: 00:00:00
Avg bucket size: 857228 (target: 1285843)
Converting suffix-array elements to index image
Allocating ftab, absorbFtab
Entering Ebwt loop
Getting block 1 of 8
  Reserving size (1285844) for bucket
  Calculating Z arrays
  Calculating Z arrays time: 00:00:00
  Entering block accumulator loop:
  10%
  20%
  30%
  40%
  50%
  60%
  70%
  80%
  90%
  100%
  Block accumulator loop time: 00:00:00
  Sorting block of length 1103375
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 1103376
Getting block 2 of 8
  Reserving size (1285844) for bucket
  Calculating Z arrays
  Calculating Z arrays time: 00:00:00
  Entering block accumulator loop:
  10%
  20%
  30%
  40%
  50%
  60%
  70%
  80%
  90%
  100%
  Block accumulator loop time: 00:00:00
  Sorting block of length 1138228
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 1138229
Getting block 3 of 8
  Reserving size (1285844) for bucket
  Calculating Z arrays
  Calculating Z arrays time: 00:00:00
  Entering block accumulator loop:
  10%
  20%
  30%
  40%
  50%
  60%
  70%
  80%
  90%
  100%
  Block accumulator loop time: 00:00:00
  Sorting block of length 172127
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 172128
Getting block 4 of 8
  Reserving size (1285844) for bucket
  Calculating Z arrays
  Calculating Z arrays time: 00:00:00
  Entering block accumulator loop:
  10%
  20%
  30%
  40%
  50%
  60%
  70%
  80%
  90%
  100%
  Block accumulator loop time: 00:00:00
  Sorting block of length 1232023
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 1232024
Getting block 5 of 8
  Reserving size (1285844) for bucket
  Calculating Z arrays
  Calculating Z arrays time: 00:00:00
  Entering block accumulator loop:
  10%
  20%
  30%
  40%
  50%
  60%
  70%
  80%
  90%
  100%
  Block accumulator loop time: 00:00:00
  Sorting block of length 630656
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 630657
Getting block 6 of 8
  Reserving size (1285844) for bucket
  Calculating Z arrays
  Calculating Z arrays time: 00:00:00
  Entering block accumulator loop:
  10%
  20%
  30%
  40%
  50%
  60%
  70%
  80%
  90%
  100%
  Block accumulator loop time: 00:00:00
  Sorting block of length 901292
  (Using difference cover)
  Sorting block time: 00:00:01
Returning block of 901293
Getting block 7 of 8
  Reserving size (1285844) for bucket
  Calculating Z arrays
  Calculating Z arrays time: 00:00:00
  Entering block accumulator loop:
  10%
  20%
  30%
  40%
  50%
  60%
  70%
  80%
  90%
  100%
  Block accumulator loop time: 00:00:00
  Sorting block of length 928166
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 928167
Getting block 8 of 8
  Reserving size (1285844) for bucket
  Calculating Z arrays
  Calculating Z arrays time: 00:00:00
  Entering block accumulator loop:
  10%
  20%
  30%
  40%
  50%
  60%
  70%
  80%
  90%
  100%
  Block accumulator loop time: 00:00:00
  Sorting block of length 751959
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 751960
Exited Ebwt loop
fchr[A]: 0
fchr[C]: 1151664
fchr[G]: 3430640
fchr[T]: 5710058
fchr[$]: 6857833
Exiting Ebwt::buildToDisk()
Returning from initFromVector
Wrote 6480707 bytes to primary EBWT file: /atium/Data/Nanopore/cpowgs/170816_BUCC/bcc_refs/bdiffusa.1.bt2
Wrote 1714464 bytes to secondary EBWT file: /atium/Data/Nanopore/cpowgs/170816_BUCC/bcc_refs/bdiffusa.2.bt2
Re-opening _in1 and _in2 as input streams
Returning from Ebwt constructor
Headers:
    len: 6857833
    bwtLen: 6857834
    sz: 1714459
    bwtSz: 1714459
    lineRate: 6
    offRate: 4
    offMask: 0xfffffff0
    ftabChars: 10
    eftabLen: 20
    eftabSz: 80
    ftabLen: 1048577
    ftabSz: 4194308
    offsLen: 428615
    offsSz: 1714460
    lineSz: 64
    sideSz: 64
    sideBwtSz: 48
    sideBwtLen: 192
    numSides: 35718
    numLines: 35718
    ebwtTotLen: 2285952
    ebwtTotSz: 2285952
    color: 0
    reverse: 0
Total time for call to driver() for forward index: 00:00:05
Reading reference sizes
  Time reading reference sizes: 00:00:00
Calculating joined length
Writing header
Reserving space for joined string
Joining reference sequences
  Time to join reference sequences: 00:00:00
  Time to reverse reference sequence: 00:00:00
bmax according to bmaxDivN setting: 1714458
Using parameters --bmax 1285844 --dcv 1024
  Doing ahead-of-time memory usage test
  Passed!  Constructing with these parameters: --bmax 1285844 --dcv 1024
Constructing suffix-array element generator
Building DifferenceCoverSample
  Building sPrime
  Building sPrimeOrder
  V-Sorting samples
  V-Sorting samples time: 00:00:00
  Allocating rank array
  Ranking v-sort output
  Ranking v-sort output time: 00:00:00
  Invoking Larsson-Sadakane on ranks
  Invoking Larsson-Sadakane on ranks time: 00:00:00
  Sanity-checking and returning
Building samples
Reserving space for 12 sample suffixes
Generating random suffixes
QSorting 12 sample offsets, eliminating duplicates
QSorting sample offsets, eliminating duplicates time: 00:00:00
Multikey QSorting 12 samples
  (Using difference cover)
  Multikey QSorting samples time: 00:00:00
Calculating bucket sizes
  Binary sorting into buckets
  10%
  20%
  30%
  40%
  50%
  60%
  70%
  80%
  90%
  100%
  Binary sorting into buckets time: 00:00:00
Splitting and merging
  Splitting and merging time: 00:00:00
Split 2, merged 7; iterating...
  Binary sorting into buckets
  10%
  20%
  30%
  40%
  50%
  60%
  70%
  80%
  90%
  100%
  Binary sorting into buckets time: 00:00:01
Splitting and merging
  Splitting and merging time: 00:00:00
Avg bucket size: 857228 (target: 1285843)
Converting suffix-array elements to index image
Allocating ftab, absorbFtab
Entering Ebwt loop
Getting block 1 of 8
  Reserving size (1285844) for bucket
  Calculating Z arrays
  Calculating Z arrays time: 00:00:00
  Entering block accumulator loop:
  10%
  20%
  30%
  40%
  50%
  60%
  70%
  80%
  90%
  100%
  Block accumulator loop time: 00:00:00
  Sorting block of length 857240
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 857241
Getting block 2 of 8
  Reserving size (1285844) for bucket
  Calculating Z arrays
  Calculating Z arrays time: 00:00:00
  Entering block accumulator loop:
  10%
  20%
  30%
  40%
  50%
  60%
  70%
  80%
  90%
  100%
  Block accumulator loop time: 00:00:00
  Sorting block of length 874183
  (Using difference cover)
  Sorting block time: 00:00:01
Returning block of 874184
Getting block 3 of 8
  Reserving size (1285844) for bucket
  Calculating Z arrays
  Calculating Z arrays time: 00:00:00
  Entering block accumulator loop:
  10%
  20%
  30%
  40%
  50%
  60%
  70%
  80%
  90%
  100%
  Block accumulator loop time: 00:00:00
  Sorting block of length 1052361
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 1052362
Getting block 4 of 8
  Reserving size (1285844) for bucket
  Calculating Z arrays
  Calculating Z arrays time: 00:00:00
  Entering block accumulator loop:
  10%
  20%
  30%
  40%
  50%
  60%
  70%
  80%
  90%
  100%
  Block accumulator loop time: 00:00:00
  Sorting block of length 351085
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 351086
Getting block 5 of 8
  Reserving size (1285844) for bucket
  Calculating Z arrays
  Calculating Z arrays time: 00:00:00
  Entering block accumulator loop:
  10%
  20%
  30%
  40%
  50%
  60%
  70%
  80%
  90%
  100%
  Block accumulator loop time: 00:00:00
  Sorting block of length 1252617
  (Using difference cover)
  Sorting block time: 00:00:01
Returning block of 1252618
Getting block 6 of 8
  Reserving size (1285844) for bucket
  Calculating Z arrays
  Calculating Z arrays time: 00:00:00
  Entering block accumulator loop:
  10%
  20%
  30%
  40%
  50%
  60%
  70%
  80%
  90%
  100%
  Block accumulator loop time: 00:00:00
  Sorting block of length 1172091
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 1172092
Getting block 7 of 8
  Reserving size (1285844) for bucket
  Calculating Z arrays
  Calculating Z arrays time: 00:00:00
  Entering block accumulator loop:
  10%
  20%
  30%
  40%
  50%
  60%
  70%
  80%
  90%
  100%
  Block accumulator loop time: 00:00:00
  Sorting block of length 1250200
  (Using difference cover)
  Sorting block time: 00:00:01
Returning block of 1250201
Getting block 8 of 8
  Reserving size (1285844) for bucket
  Calculating Z arrays
  Calculating Z arrays time: 00:00:00
  Entering block accumulator loop:
  10%
  20%
  30%
  40%
  50%
  60%
  70%
  80%
  90%
  100%
  Block accumulator loop time: 00:00:00
  Sorting block of length 48049
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 48050
Exited Ebwt loop
fchr[A]: 0
fchr[C]: 1151664
fchr[G]: 3430640
fchr[T]: 5710058
fchr[$]: 6857833
Exiting Ebwt::buildToDisk()
Returning from initFromVector
Wrote 6480707 bytes to primary EBWT file: /atium/Data/Nanopore/cpowgs/170816_BUCC/bcc_refs/bdiffusa.rev.1.bt2
Wrote 1714464 bytes to secondary EBWT file: /atium/Data/Nanopore/cpowgs/170816_BUCC/bcc_refs/bdiffusa.rev.2.bt2
Re-opening _in1 and _in2 as input streams
Returning from Ebwt constructor
Headers:
    len: 6857833
    bwtLen: 6857834
    sz: 1714459
    bwtSz: 1714459
    lineRate: 6
    offRate: 4
    offMask: 0xfffffff0
    ftabChars: 10
    eftabLen: 20
    eftabSz: 80
    ftabLen: 1048577
    ftabSz: 4194308
    offsLen: 428615
    offsSz: 1714460
    lineSz: 64
    sideSz: 64
    sideBwtSz: 48
    sideBwtLen: 192
    numSides: 35718
    numLines: 35718
    ebwtTotLen: 2285952
    ebwtTotSz: 2285952
    color: 0
    reverse: 1
Total time for backward call to driver() for mirror index: 00:00:04
Settings:
  Output files: "/atium/Data/Nanopore/cpowgs/170816_BUCC/bcc_refs/bdolosa.*.bt2"
  Line rate: 6 (line is 64 bytes)
  Lines per side: 1 (side is 64 bytes)
  Offset rate: 4 (one in 16)
  FTable chars: 10
  Strings: unpacked
  Max bucket size: default
  Max bucket size, sqrt multiplier: default
  Max bucket size, len divisor: 4
  Difference-cover sample period: 1024
  Endianness: little
  Actual local endianness: little
  Sanity checking: disabled
  Assertions: disabled
  Random seed: 0
  Sizeofs: void*:8, int:4, long:8, size_t:8
Input files DNA, FASTA:
  /atium/Data/Nanopore/cpowgs/170816_BUCC/bcc_refs/bdolosa.fa
Reading reference sizes
  Time reading reference sizes: 00:00:00
Calculating joined length
Writing header
Reserving space for joined string
Joining reference sequences
  Time to join reference sequences: 00:00:00
bmax according to bmaxDivN setting: 1602273
Using parameters --bmax 1201705 --dcv 1024
  Doing ahead-of-time memory usage test
  Passed!  Constructing with these parameters: --bmax 1201705 --dcv 1024
Constructing suffix-array element generator
Building DifferenceCoverSample
  Building sPrime
  Building sPrimeOrder
  V-Sorting samples
  V-Sorting samples time: 00:00:00
  Allocating rank array
  Ranking v-sort output
  Ranking v-sort output time: 00:00:00
  Invoking Larsson-Sadakane on ranks
  Invoking Larsson-Sadakane on ranks time: 00:00:00
  Sanity-checking and returning
Building samples
Reserving space for 12 sample suffixes
Generating random suffixes
QSorting 12 sample offsets, eliminating duplicates
QSorting sample offsets, eliminating duplicates time: 00:00:00
Multikey QSorting 12 samples
  (Using difference cover)
  Multikey QSorting samples time: 00:00:00
Calculating bucket sizes
  Binary sorting into buckets
  10%
  20%
  30%
  40%
  50%
  60%
  70%
  80%
  90%
  100%
  Binary sorting into buckets time: 00:00:01
Splitting and merging
  Splitting and merging time: 00:00:00
Split 1, merged 7; iterating...
  Binary sorting into buckets
  10%
  20%
  30%
  40%
  50%
  60%
  70%
  80%
  90%
  100%
  Binary sorting into buckets time: 00:00:00
Splitting and merging
  Splitting and merging time: 00:00:00
Split 1, merged 1; iterating...
  Binary sorting into buckets
  10%
  20%
  30%
  40%
  50%
  60%
  70%
  80%
  90%
  100%
  Binary sorting into buckets time: 00:00:00
Splitting and merging
  Splitting and merging time: 00:00:00
Avg bucket size: 1.06818e+06 (target: 1201704)
Converting suffix-array elements to index image
Allocating ftab, absorbFtab
Entering Ebwt loop
Getting block 1 of 6
  Reserving size (1201705) for bucket
  Calculating Z arrays
  Calculating Z arrays time: 00:00:00
  Entering block accumulator loop:
  10%
  20%
  30%
  40%
  50%
  60%
  70%
  80%
  90%
  100%
  Block accumulator loop time: 00:00:01
  Sorting block of length 1012137
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 1012138
Getting block 2 of 6
  Reserving size (1201705) for bucket
  Calculating Z arrays
  Calculating Z arrays time: 00:00:00
  Entering block accumulator loop:
  10%
  20%
  30%
  40%
  50%
  60%
  70%
  80%
  90%
  100%
  Block accumulator loop time: 00:00:00
  Sorting block of length 1075880
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 1075881
Getting block 3 of 6
  Reserving size (1201705) for bucket
  Calculating Z arrays
  Calculating Z arrays time: 00:00:00
  Entering block accumulator loop:
  10%
  20%
  30%
  40%
  50%
  60%
  70%
  80%
  90%
  100%
  Block accumulator loop time: 00:00:00
  Sorting block of length 1190029
  (Using difference cover)
  Sorting block time: 00:00:01
Returning block of 1190030
Getting block 4 of 6
  Reserving size (1201705) for bucket
  Calculating Z arrays
  Calculating Z arrays time: 00:00:00
  Entering block accumulator loop:
  10%
  20%
  30%
  40%
  50%
  60%
  70%
  80%
  90%
  100%
  Block accumulator loop time: 00:00:00
  Sorting block of length 788404
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 788405
Getting block 5 of 6
  Reserving size (1201705) for bucket
  Calculating Z arrays
  Calculating Z arrays time: 00:00:00
  Entering block accumulator loop:
  10%
  20%
  30%
  40%
  50%
  60%
  70%
  80%
  90%
  100%
  Block accumulator loop time: 00:00:00
  Sorting block of length 1196093
  (Using difference cover)
  Sorting block time: 00:00:01
Returning block of 1196094
Getting block 6 of 6
  Reserving size (1201705) for bucket
  Calculating Z arrays
  Calculating Z arrays time: 00:00:00
  Entering block accumulator loop:
  10%
  20%
  30%
  40%
  50%
  60%
  70%
  80%
  90%
  100%
  Block accumulator loop time: 00:00:00
  Sorting block of length 1146547
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 1146548
Exited Ebwt loop
fchr[A]: 0
fchr[C]: 1054506
fchr[G]: 3207135
fchr[T]: 5349121
fchr[$]: 6409095
Exiting Ebwt::buildToDisk()
Returning from initFromVector
Wrote 6331100 bytes to primary EBWT file: /atium/Data/Nanopore/cpowgs/170816_BUCC/bcc_refs/bdolosa.1.bt2
Wrote 1602280 bytes to secondary EBWT file: /atium/Data/Nanopore/cpowgs/170816_BUCC/bcc_refs/bdolosa.2.bt2
Re-opening _in1 and _in2 as input streams
Returning from Ebwt constructor
Headers:
    len: 6409095
    bwtLen: 6409096
    sz: 1602274
    bwtSz: 1602274
    lineRate: 6
    offRate: 4
    offMask: 0xfffffff0
    ftabChars: 10
    eftabLen: 20
    eftabSz: 80
    ftabLen: 1048577
    ftabSz: 4194308
    offsLen: 400569
    offsSz: 1602276
    lineSz: 64
    sideSz: 64
    sideBwtSz: 48
    sideBwtLen: 192
    numSides: 33381
    numLines: 33381
    ebwtTotLen: 2136384
    ebwtTotSz: 2136384
    color: 0
    reverse: 0
Total time for call to driver() for forward index: 00:00:05
Reading reference sizes
  Time reading reference sizes: 00:00:00
Calculating joined length
Writing header
Reserving space for joined string
Joining reference sequences
  Time to join reference sequences: 00:00:00
  Time to reverse reference sequence: 00:00:00
bmax according to bmaxDivN setting: 1602273
Using parameters --bmax 1201705 --dcv 1024
  Doing ahead-of-time memory usage test
  Passed!  Constructing with these parameters: --bmax 1201705 --dcv 1024
Constructing suffix-array element generator
Building DifferenceCoverSample
  Building sPrime
  Building sPrimeOrder
  V-Sorting samples
  V-Sorting samples time: 00:00:00
  Allocating rank array
  Ranking v-sort output
  Ranking v-sort output time: 00:00:00
  Invoking Larsson-Sadakane on ranks
  Invoking Larsson-Sadakane on ranks time: 00:00:00
  Sanity-checking and returning
Building samples
Reserving space for 12 sample suffixes
Generating random suffixes
QSorting 12 sample offsets, eliminating duplicates
QSorting sample offsets, eliminating duplicates time: 00:00:00
Multikey QSorting 12 samples
  (Using difference cover)
  Multikey QSorting samples time: 00:00:00
Calculating bucket sizes
  Binary sorting into buckets
  10%
  20%
  30%
  40%
  50%
  60%
  70%
  80%
  90%
  100%
  Binary sorting into buckets time: 00:00:01
Splitting and merging
  Splitting and merging time: 00:00:00
Split 1, merged 6; iterating...
  Binary sorting into buckets
  10%
  20%
  30%
  40%
  50%
  60%
  70%
  80%
  90%
  100%
  Binary sorting into buckets time: 00:00:00
Splitting and merging
  Splitting and merging time: 00:00:00
Split 1, merged 0; iterating...
  Binary sorting into buckets
  10%
  20%
  30%
  40%
  50%
  60%
  70%
  80%
  90%
  100%
  Binary sorting into buckets time: 00:00:00
Splitting and merging
  Splitting and merging time: 00:00:00
Split 1, merged 1; iterating...
  Binary sorting into buckets
  10%
  20%
  30%
  40%
  50%
  60%
  70%
  80%
  90%
  100%
  Binary sorting into buckets time: 00:00:01
Splitting and merging
  Splitting and merging time: 00:00:00
Avg bucket size: 801136 (target: 1201704)
Converting suffix-array elements to index image
Allocating ftab, absorbFtab
Entering Ebwt loop
Getting block 1 of 8
  Reserving size (1201705) for bucket
  Calculating Z arrays
  Calculating Z arrays time: 00:00:00
  Entering block accumulator loop:
  10%
  20%
  30%
  40%
  50%
  60%
  70%
  80%
  90%
  100%
  Block accumulator loop time: 00:00:00
  Sorting block of length 1196971
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 1196972
Getting block 2 of 8
  Reserving size (1201705) for bucket
  Calculating Z arrays
  Calculating Z arrays time: 00:00:00
  Entering block accumulator loop:
  10%
  20%
  30%
  40%
  50%
  60%
  70%
  80%
  90%
  100%
  Block accumulator loop time: 00:00:00
  Sorting block of length 116657
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 116658
Getting block 3 of 8
  Reserving size (1201705) for bucket
  Calculating Z arrays
  Calculating Z arrays time: 00:00:00
  Entering block accumulator loop:
  10%
  20%
  30%
  40%
  50%
  60%
  70%
  80%
  90%
  100%
  Block accumulator loop time: 00:00:01
  Sorting block of length 1191620
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 1191621
Getting block 4 of 8
  Reserving size (1201705) for bucket
  Calculating Z arrays
  Calculating Z arrays time: 00:00:00
  Entering block accumulator loop:
  10%
  20%
  30%
  40%
  50%
  60%
  70%
  80%
  90%
  100%
  Block accumulator loop time: 00:00:00
  Sorting block of length 571976
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 571977
Getting block 5 of 8
  Reserving size (1201705) for bucket
  Calculating Z arrays
  Calculating Z arrays time: 00:00:00
  Entering block accumulator loop:
  10%
  20%
  30%
  40%
  50%
  60%
  70%
  80%
  90%
  100%
  Block accumulator loop time: 00:00:00
  Sorting block of length 939545
  (Using difference cover)
  Sorting block time: 00:00:01
Returning block of 939546
Getting block 6 of 8
  Reserving size (1201705) for bucket
  Calculating Z arrays
  Calculating Z arrays time: 00:00:00
  Entering block accumulator loop:
  10%
  20%
  30%
  40%
  50%
  60%
  70%
  80%
  90%
  100%
  Block accumulator loop time: 00:00:00
  Sorting block of length 936159
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 936160
Getting block 7 of 8
  Reserving size (1201705) for bucket
  Calculating Z arrays
  Calculating Z arrays time: 00:00:00
  Entering block accumulator loop:
  10%
  20%
  30%
  40%
  50%
  60%
  70%
  80%
  90%
  100%
  Block accumulator loop time: 00:00:00
  Sorting block of length 458889
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 458890
Getting block 8 of 8
  Reserving size (1201705) for bucket
  Calculating Z arrays
  Calculating Z arrays time: 00:00:00
  Entering block accumulator loop:
  10%
  20%
  30%
  40%
  50%
  60%
  70%
  80%
  90%
  100%
  Block accumulator loop time: 00:00:00
  Sorting block of length 997271
  (Using difference cover)
  Sorting block time: 00:00:01
Returning block of 997272
Exited Ebwt loop
fchr[A]: 0
fchr[C]: 1054506
fchr[G]: 3207135
fchr[T]: 5349121
fchr[$]: 6409095
Exiting Ebwt::buildToDisk()
Returning from initFromVector
Wrote 6331100 bytes to primary EBWT file: /atium/Data/Nanopore/cpowgs/170816_BUCC/bcc_refs/bdolosa.rev.1.bt2
Wrote 1602280 bytes to secondary EBWT file: /atium/Data/Nanopore/cpowgs/170816_BUCC/bcc_refs/bdolosa.rev.2.bt2
Re-opening _in1 and _in2 as input streams
Returning from Ebwt constructor
Headers:
    len: 6409095
    bwtLen: 6409096
    sz: 1602274
    bwtSz: 1602274
    lineRate: 6
    offRate: 4
    offMask: 0xfffffff0
    ftabChars: 10
    eftabLen: 20
    eftabSz: 80
    ftabLen: 1048577
    ftabSz: 4194308
    offsLen: 400569
    offsSz: 1602276
    lineSz: 64
    sideSz: 64
    sideBwtSz: 48
    sideBwtLen: 192
    numSides: 33381
    numLines: 33381
    ebwtTotLen: 2136384
    ebwtTotSz: 2136384
    color: 0
    reverse: 1
Total time for backward call to driver() for mirror index: 00:00:05
Settings:
  Output files: "/atium/Data/Nanopore/cpowgs/170816_BUCC/bcc_refs/blata.*.bt2"
  Line rate: 6 (line is 64 bytes)
  Lines per side: 1 (side is 64 bytes)
  Offset rate: 4 (one in 16)
  FTable chars: 10
  Strings: unpacked
  Max bucket size: default
  Max bucket size, sqrt multiplier: default
  Max bucket size, len divisor: 4
  Difference-cover sample period: 1024
  Endianness: little
  Actual local endianness: little
  Sanity checking: disabled
  Assertions: disabled
  Random seed: 0
  Sizeofs: void*:8, int:4, long:8, size_t:8
Input files DNA, FASTA:
  /atium/Data/Nanopore/cpowgs/170816_BUCC/bcc_refs/blata.fa
Reading reference sizes
  Time reading reference sizes: 00:00:01
Calculating joined length
Writing header
Reserving space for joined string
Joining reference sequences
  Time to join reference sequences: 00:00:00
bmax according to bmaxDivN setting: 2169069
Using parameters --bmax 1626802 --dcv 1024
  Doing ahead-of-time memory usage test
  Passed!  Constructing with these parameters: --bmax 1626802 --dcv 1024
Constructing suffix-array element generator
Building DifferenceCoverSample
  Building sPrime
  Building sPrimeOrder
  V-Sorting samples
  V-Sorting samples time: 00:00:00
  Allocating rank array
  Ranking v-sort output
  Ranking v-sort output time: 00:00:00
  Invoking Larsson-Sadakane on ranks
  Invoking Larsson-Sadakane on ranks time: 00:00:00
  Sanity-checking and returning
Building samples
Reserving space for 12 sample suffixes
Generating random suffixes
QSorting 12 sample offsets, eliminating duplicates
QSorting sample offsets, eliminating duplicates time: 00:00:00
Multikey QSorting 12 samples
  (Using difference cover)
  Multikey QSorting samples time: 00:00:00
Calculating bucket sizes
  Binary sorting into buckets
  10%
  20%
  30%
  40%
  50%
  60%
  70%
  80%
  90%
  100%
  Binary sorting into buckets time: 00:00:01
Splitting and merging
  Splitting and merging time: 00:00:00
Split 2, merged 7; iterating...
  Binary sorting into buckets
  10%
  20%
  30%
  40%
  50%
  60%
  70%
  80%
  90%
  100%
  Binary sorting into buckets time: 00:00:00
Splitting and merging
  Splitting and merging time: 00:00:00
Avg bucket size: 1.08453e+06 (target: 1626801)
Converting suffix-array elements to index image
Allocating ftab, absorbFtab
Entering Ebwt loop
Getting block 1 of 8
  Reserving size (1626802) for bucket
  Calculating Z arrays
  Calculating Z arrays time: 00:00:00
  Entering block accumulator loop:
  10%
  20%
  30%
  40%
  50%
  60%
  70%
  80%
  90%
  100%
  Block accumulator loop time: 00:00:00
  Sorting block of length 1100105
  (Using difference cover)
  Sorting block time: 00:00:01
Returning block of 1100106
Getting block 2 of 8
  Reserving size (1626802) for bucket
  Calculating Z arrays
  Calculating Z arrays time: 00:00:00
  Entering block accumulator loop:
  10%
  20%
  30%
  40%
  50%
  60%
  70%
  80%
  90%
  100%
  Block accumulator loop time: 00:00:00
  Sorting block of length 1050176
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 1050177
Getting block 3 of 8
  Reserving size (1626802) for bucket
  Calculating Z arrays
  Calculating Z arrays time: 00:00:00
  Entering block accumulator loop:
  10%
  20%
  30%
  40%
  50%
  60%
  70%
  80%
  90%
  100%
  Block accumulator loop time: 00:00:00
  Sorting block of length 757150
  (Using difference cover)
  Sorting block time: 00:00:01
Returning block of 757151
Getting block 4 of 8
  Reserving size (1626802) for bucket
  Calculating Z arrays
  Calculating Z arrays time: 00:00:00
  Entering block accumulator loop:
  10%
  20%
  30%
  40%
  50%
  60%
  70%
  80%
  90%
  100%
  Block accumulator loop time: 00:00:00
  Sorting block of length 1595760
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 1595761
Getting block 5 of 8
  Reserving size (1626802) for bucket
  Calculating Z arrays
  Calculating Z arrays time: 00:00:00
  Entering block accumulator loop:
  10%
  20%
  30%
  40%
  50%
  60%
  70%
  80%
  90%
  100%
  Block accumulator loop time: 00:00:01
  Sorting block of length 292881
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 292882
Getting block 6 of 8
  Reserving size (1626802) for bucket
  Calculating Z arrays
  Calculating Z arrays time: 00:00:00
  Entering block accumulator loop:
  10%
  20%
  30%
  40%
  50%
  60%
  70%
  80%
  90%
  100%
  Block accumulator loop time: 00:00:00
  Sorting block of length 1618255
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 1618256
Getting block 7 of 8
  Reserving size (1626802) for bucket
  Calculating Z arrays
  Calculating Z arrays time: 00:00:00
  Entering block accumulator loop:
  10%
  20%
  30%
  40%
  50%
  60%
  70%
  80%
  90%
  100%
  Block accumulator loop time: 00:00:01
  Sorting block of length 966959
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 966960
Getting block 8 of 8
  Reserving size (1626802) for bucket
  Calculating Z arrays
  Calculating Z arrays time: 00:00:00
  Entering block accumulator loop:
  10%
  20%
  30%
  40%
  50%
  60%
  70%
  80%
  90%
  100%
  Block accumulator loop time: 00:00:00
  Sorting block of length 1294984
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 1294985
Exited Ebwt loop
fchr[A]: 0
fchr[C]: 1462534
fchr[G]: 4332138
fchr[T]: 7212515
fchr[$]: 8676277
Exiting Ebwt::buildToDisk()
Returning from initFromVector
Wrote 7086779 bytes to primary EBWT file: /atium/Data/Nanopore/cpowgs/170816_BUCC/bcc_refs/blata.1.bt2
Wrote 2169076 bytes to secondary EBWT file: /atium/Data/Nanopore/cpowgs/170816_BUCC/bcc_refs/blata.2.bt2
Re-opening _in1 and _in2 as input streams
Returning from Ebwt constructor
Headers:
    len: 8676277
    bwtLen: 8676278
    sz: 2169070
    bwtSz: 2169070
    lineRate: 6
    offRate: 4
    offMask: 0xfffffff0
    ftabChars: 10
    eftabLen: 20
    eftabSz: 80
    ftabLen: 1048577
    ftabSz: 4194308
    offsLen: 542268
    offsSz: 2169072
    lineSz: 64
    sideSz: 64
    sideBwtSz: 48
    sideBwtLen: 192
    numSides: 45189
    numLines: 45189
    ebwtTotLen: 2892096
    ebwtTotSz: 2892096
    color: 0
    reverse: 0
Total time for call to driver() for forward index: 00:00:07
Reading reference sizes
  Time reading reference sizes: 00:00:00
Calculating joined length
Writing header
Reserving space for joined string
Joining reference sequences
  Time to join reference sequences: 00:00:00
  Time to reverse reference sequence: 00:00:00
bmax according to bmaxDivN setting: 2169069
Using parameters --bmax 1626802 --dcv 1024
  Doing ahead-of-time memory usage test
  Passed!  Constructing with these parameters: --bmax 1626802 --dcv 1024
Constructing suffix-array element generator
Building DifferenceCoverSample
  Building sPrime
  Building sPrimeOrder
  V-Sorting samples
  V-Sorting samples time: 00:00:00
  Allocating rank array
  Ranking v-sort output
  Ranking v-sort output time: 00:00:00
  Invoking Larsson-Sadakane on ranks
  Invoking Larsson-Sadakane on ranks time: 00:00:00
  Sanity-checking and returning
Building samples
Reserving space for 12 sample suffixes
Generating random suffixes
QSorting 12 sample offsets, eliminating duplicates
QSorting sample offsets, eliminating duplicates time: 00:00:00
Multikey QSorting 12 samples
  (Using difference cover)
  Multikey QSorting samples time: 00:00:00
Calculating bucket sizes
  Binary sorting into buckets
  10%
  20%
  30%
  40%
  50%
  60%
  70%
  80%
  90%
  100%
  Binary sorting into buckets time: 00:00:01
Splitting and merging
  Splitting and merging time: 00:00:00
Split 1, merged 7; iterating...
  Binary sorting into buckets
  10%
  20%
  30%
  40%
  50%
  60%
  70%
  80%
  90%
  100%
  Binary sorting into buckets time: 00:00:00
Splitting and merging
  Splitting and merging time: 00:00:00
Split 1, merged 1; iterating...
  Binary sorting into buckets
  10%
  20%
  30%
  40%
  50%
  60%
  70%
  80%
  90%
  100%
  Binary sorting into buckets time: 00:00:01
Splitting and merging
  Splitting and merging time: 00:00:00
Avg bucket size: 1.44605e+06 (target: 1626801)
Converting suffix-array elements to index image
Allocating ftab, absorbFtab
Entering Ebwt loop
Getting block 1 of 6
  Reserving size (1626802) for bucket
  Calculating Z arrays
  Calculating Z arrays time: 00:00:00
  Entering block accumulator loop:
  10%
  20%
  30%
  40%
  50%
  60%
  70%
  80%
  90%
  100%
  Block accumulator loop time: 00:00:00
  Sorting block of length 1573802
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 1573803
Getting block 2 of 6
  Reserving size (1626802) for bucket
  Calculating Z arrays
  Calculating Z arrays time: 00:00:00
  Entering block accumulator loop:
  10%
  20%
  30%
  40%
  50%
  60%
  70%
  80%
  90%
  100%
  Block accumulator loop time: 00:00:01
  Sorting block of length 1494255
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 1494256
Getting block 3 of 6
  Reserving size (1626802) for bucket
  Calculating Z arrays
  Calculating Z arrays time: 00:00:00
  Entering block accumulator loop:
  10%
  20%
  30%
  40%
  50%
  60%
  70%
  80%
  90%
  100%
  Block accumulator loop time: 00:00:00
  Sorting block of length 1608934
  (Using difference cover)
  Sorting block time: 00:00:01
Returning block of 1608935
Getting block 4 of 6
  Reserving size (1626802) for bucket
  Calculating Z arrays
  Calculating Z arrays time: 00:00:00
  Entering block accumulator loop:
  10%
  20%
  30%
  40%
  50%
  60%
  70%
  80%
  90%
  100%
  Block accumulator loop time: 00:00:00
  Sorting block of length 1390557
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 1390558
Getting block 5 of 6
  Reserving size (1626802) for bucket
  Calculating Z arrays
  Calculating Z arrays time: 00:00:00
  Entering block accumulator loop:
  10%
  20%
  30%
  40%
  50%
  60%
  70%
  80%
  90%
  100%
  Block accumulator loop time: 00:00:00
  Sorting block of length 1248880
  (Using difference cover)
  Sorting block time: 00:00:01
Returning block of 1248881
Getting block 6 of 6
  Reserving size (1626802) for bucket
  Calculating Z arrays
  Calculating Z arrays time: 00:00:00
  Entering block accumulator loop:
  10%
  20%
  30%
  40%
  50%
  60%
  70%
  80%
  90%
  100%
  Block accumulator loop time: 00:00:00
  Sorting block of length 1359844
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 1359845
Exited Ebwt loop
fchr[A]: 0
fchr[C]: 1462534
fchr[G]: 4332138
fchr[T]: 7212515
fchr[$]: 8676277
Exiting Ebwt::buildToDisk()
Returning from initFromVector
Wrote 7086779 bytes to primary EBWT file: /atium/Data/Nanopore/cpowgs/170816_BUCC/bcc_refs/blata.rev.1.bt2
Wrote 2169076 bytes to secondary EBWT file: /atium/Data/Nanopore/cpowgs/170816_BUCC/bcc_refs/blata.rev.2.bt2
Re-opening _in1 and _in2 as input streams
Returning from Ebwt constructor
Headers:
    len: 8676277
    bwtLen: 8676278
    sz: 2169070
    bwtSz: 2169070
    lineRate: 6
    offRate: 4
    offMask: 0xfffffff0
    ftabChars: 10
    eftabLen: 20
    eftabSz: 80
    ftabLen: 1048577
    ftabSz: 4194308
    offsLen: 542268
    offsSz: 2169072
    lineSz: 64
    sideSz: 64
    sideBwtSz: 48
    sideBwtLen: 192
    numSides: 45189
    numLines: 45189
    ebwtTotLen: 2892096
    ebwtTotSz: 2892096
    color: 0
    reverse: 1
Total time for backward call to driver() for mirror index: 00:00:06
Settings:
  Output files: "/atium/Data/Nanopore/cpowgs/170816_BUCC/bcc_refs/blatens.*.bt2"
  Line rate: 6 (line is 64 bytes)
  Lines per side: 1 (side is 64 bytes)
  Offset rate: 4 (one in 16)
  FTable chars: 10
  Strings: unpacked
  Max bucket size: default
  Max bucket size, sqrt multiplier: default
  Max bucket size, len divisor: 4
  Difference-cover sample period: 1024
  Endianness: little
  Actual local endianness: little
  Sanity checking: disabled
  Assertions: disabled
  Random seed: 0
  Sizeofs: void*:8, int:4, long:8, size_t:8
Input files DNA, FASTA:
  /atium/Data/Nanopore/cpowgs/170816_BUCC/bcc_refs/blatens.fa
Reading reference sizes
  Time reading reference sizes: 00:00:00
Calculating joined length
Writing header
Reserving space for joined string
Joining reference sequences
  Time to join reference sequences: 00:00:00
bmax according to bmaxDivN setting: 1653619
Using parameters --bmax 1240215 --dcv 1024
  Doing ahead-of-time memory usage test
  Passed!  Constructing with these parameters: --bmax 1240215 --dcv 1024
Constructing suffix-array element generator
Building DifferenceCoverSample
  Building sPrime
  Building sPrimeOrder
  V-Sorting samples
  V-Sorting samples time: 00:00:00
  Allocating rank array
  Ranking v-sort output
  Ranking v-sort output time: 00:00:00
  Invoking Larsson-Sadakane on ranks
  Invoking Larsson-Sadakane on ranks time: 00:00:00
  Sanity-checking and returning
Building samples
Reserving space for 12 sample suffixes
Generating random suffixes
QSorting 12 sample offsets, eliminating duplicates
QSorting sample offsets, eliminating duplicates time: 00:00:00
Multikey QSorting 12 samples
  (Using difference cover)
  Multikey QSorting samples time: 00:00:00
Calculating bucket sizes
  Binary sorting into buckets
  10%
  20%
  30%
  40%
  50%
  60%
  70%
  80%
  90%
  100%
  Binary sorting into buckets time: 00:00:00
Splitting and merging
  Splitting and merging time: 00:00:00
Split 1, merged 6; iterating...
  Binary sorting into buckets
  10%
  20%
  30%
  40%
  50%
  60%
  70%
  80%
  90%
  100%
  Binary sorting into buckets time: 00:00:01
Splitting and merging
  Splitting and merging time: 00:00:00
Avg bucket size: 826809 (target: 1240214)
Converting suffix-array elements to index image
Allocating ftab, absorbFtab
Entering Ebwt loop
Getting block 1 of 8
  Reserving size (1240215) for bucket
  Calculating Z arrays
  Calculating Z arrays time: 00:00:00
  Entering block accumulator loop:
  10%
  20%
  30%
  40%
  50%
  60%
  70%
  80%
  90%
  100%
  Block accumulator loop time: 00:00:00
  Sorting block of length 708308
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 708309
Getting block 2 of 8
  Reserving size (1240215) for bucket
  Calculating Z arrays
  Calculating Z arrays time: 00:00:00
  Entering block accumulator loop:
  10%
  20%
  30%
  40%
  50%
  60%
  70%
  80%
  90%
  100%
  Block accumulator loop time: 00:00:00
  Sorting block of length 609607
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 609608
Getting block 3 of 8
  Reserving size (1240215) for bucket
  Calculating Z arrays
  Calculating Z arrays time: 00:00:00
  Entering block accumulator loop:
  10%
  20%
  30%
  40%
  50%
  60%
  70%
  80%
  90%
  100%
  Block accumulator loop time: 00:00:00
  Sorting block of length 1199641
  (Using difference cover)
  Sorting block time: 00:00:01
Returning block of 1199642
Getting block 4 of 8
  Reserving size (1240215) for bucket
  Calculating Z arrays
  Calculating Z arrays time: 00:00:00
  Entering block accumulator loop:
  10%
  20%
  30%
  40%
  50%
  60%
  70%
  80%
  90%
  100%
  Block accumulator loop time: 00:00:00
  Sorting block of length 398466
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 398467
Getting block 5 of 8
  Reserving size (1240215) for bucket
  Calculating Z arrays
  Calculating Z arrays time: 00:00:00
  Entering block accumulator loop:
  10%
  20%
  30%
  40%
  50%
  60%
  70%
  80%
  90%
  100%
  Block accumulator loop time: 00:00:00
  Sorting block of length 1047284
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 1047285
Getting block 6 of 8
  Reserving size (1240215) for bucket
  Calculating Z arrays
  Calculating Z arrays time: 00:00:00
  Entering block accumulator loop:
  10%
  20%
  30%
  40%
  50%
  60%
  70%
  80%
  90%
  100%
  Block accumulator loop time: 00:00:01
  Sorting block of length 1199432
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 1199433
Getting block 7 of 8
  Reserving size (1240215) for bucket
  Calculating Z arrays
  Calculating Z arrays time: 00:00:00
  Entering block accumulator loop:
  10%
  20%
  30%
  40%
  50%
  60%
  70%
  80%
  90%
  100%
  Block accumulator loop time: 00:00:00
  Sorting block of length 400449
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 400450
Getting block 8 of 8
  Reserving size (1240215) for bucket
  Calculating Z arrays
  Calculating Z arrays time: 00:00:00
  Entering block accumulator loop:
  10%
  20%
  30%
  40%
  50%
  60%
  70%
  80%
  90%
  100%
  Block accumulator loop time: 00:00:00
  Sorting block of length 1051284
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 1051285
Exited Ebwt loop
fchr[A]: 0
fchr[C]: 1113125
fchr[G]: 3317165
fchr[T]: 5503451
fchr[$]: 6614478
Exiting Ebwt::buildToDisk()
Returning from initFromVector
Wrote 6399705 bytes to primary EBWT file: /atium/Data/Nanopore/cpowgs/170816_BUCC/bcc_refs/blatens.1.bt2
Wrote 1653624 bytes to secondary EBWT file: /atium/Data/Nanopore/cpowgs/170816_BUCC/bcc_refs/blatens.2.bt2
Re-opening _in1 and _in2 as input streams
Returning from Ebwt constructor
Headers:
    len: 6614478
    bwtLen: 6614479
    sz: 1653620
    bwtSz: 1653620
    lineRate: 6
    offRate: 4
    offMask: 0xfffffff0
    ftabChars: 10
    eftabLen: 20
    eftabSz: 80
    ftabLen: 1048577
    ftabSz: 4194308
    offsLen: 413405
    offsSz: 1653620
    lineSz: 64
    sideSz: 64
    sideBwtSz: 48
    sideBwtLen: 192
    numSides: 34451
    numLines: 34451
    ebwtTotLen: 2204864
    ebwtTotSz: 2204864
    color: 0
    reverse: 0
Total time for call to driver() for forward index: 00:00:04
Reading reference sizes
  Time reading reference sizes: 00:00:00
Calculating joined length
Writing header
Reserving space for joined string
Joining reference sequences
  Time to join reference sequences: 00:00:00
  Time to reverse reference sequence: 00:00:00
bmax according to bmaxDivN setting: 1653619
Using parameters --bmax 1240215 --dcv 1024
  Doing ahead-of-time memory usage test
  Passed!  Constructing with these parameters: --bmax 1240215 --dcv 1024
Constructing suffix-array element generator
Building DifferenceCoverSample
  Building sPrime
  Building sPrimeOrder
  V-Sorting samples
  V-Sorting samples time: 00:00:00
  Allocating rank array
  Ranking v-sort output
  Ranking v-sort output time: 00:00:00
  Invoking Larsson-Sadakane on ranks
  Invoking Larsson-Sadakane on ranks time: 00:00:00
  Sanity-checking and returning
Building samples
Reserving space for 12 sample suffixes
Generating random suffixes
QSorting 12 sample offsets, eliminating duplicates
QSorting sample offsets, eliminating duplicates time: 00:00:00
Multikey QSorting 12 samples
  (Using difference cover)
  Multikey QSorting samples time: 00:00:00
Calculating bucket sizes
  Binary sorting into buckets
  10%
  20%
  30%
  40%
  50%
  60%
  70%
  80%
  90%
  100%
  Binary sorting into buckets time: 00:00:00
Splitting and merging
  Splitting and merging time: 00:00:00
Avg bucket size: 944925 (target: 1240214)
Converting suffix-array elements to index image
Allocating ftab, absorbFtab
Entering Ebwt loop
Getting block 1 of 7
  Reserving size (1240215) for bucket
  Calculating Z arrays
  Calculating Z arrays time: 00:00:00
  Entering block accumulator loop:
  10%
  20%
  30%
  40%
  50%
  60%
  70%
  80%
  90%
  100%
  Block accumulator loop time: 00:00:00
  Sorting block of length 1145603
  (Using difference cover)
  Sorting block time: 00:00:01
Returning block of 1145604
Getting block 2 of 7
  Reserving size (1240215) for bucket
  Calculating Z arrays
  Calculating Z arrays time: 00:00:00
  Entering block accumulator loop:
  10%
  20%
  30%
  40%
  50%
  60%
  70%
  80%
  90%
  100%
  Block accumulator loop time: 00:00:00
  Sorting block of length 715318
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 715319
Getting block 3 of 7
  Reserving size (1240215) for bucket
  Calculating Z arrays
  Calculating Z arrays time: 00:00:00
  Entering block accumulator loop:
  10%
  20%
  30%
  40%
  50%
  60%
  70%
  80%
  90%
  100%
  Block accumulator loop time: 00:00:00
  Sorting block of length 635486
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 635487
Getting block 4 of 7
  Reserving size (1240215) for bucket
  Calculating Z arrays
  Calculating Z arrays time: 00:00:00
  Entering block accumulator loop:
  10%
  20%
  30%
  40%
  50%
  60%
  70%
  80%
  90%
  100%
  Block accumulator loop time: 00:00:01
  Sorting block of length 1222197
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 1222198
Getting block 5 of 7
  Reserving size (1240215) for bucket
  Calculating Z arrays
  Calculating Z arrays time: 00:00:00
  Entering block accumulator loop:
  10%
  20%
  30%
  40%
  50%
  60%
  70%
  80%
  90%
  100%
  Block accumulator loop time: 00:00:00
  Sorting block of length 1227962
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 1227963
Getting block 6 of 7
  Reserving size (1240215) for bucket
  Calculating Z arrays
  Calculating Z arrays time: 00:00:00
  Entering block accumulator loop:
  10%
  20%
  30%
  40%
  50%
  60%
  70%
  80%
  90%
  100%
  Block accumulator loop time: 00:00:00
  Sorting block of length 866323
  (Using difference cover)
  Sorting block time: 00:00:01
Returning block of 866324
Getting block 7 of 7
  Reserving size (1240215) for bucket
  Calculating Z arrays
  Calculating Z arrays time: 00:00:00
  Entering block accumulator loop:
  10%
  20%
  30%
  40%
  50%
  60%
  70%
  80%
  90%
  100%
  Block accumulator loop time: 00:00:00
  Sorting block of length 801583
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 801584
Exited Ebwt loop
fchr[A]: 0
fchr[C]: 1113125
fchr[G]: 3317165
fchr[T]: 5503451
fchr[$]: 6614478
Exiting Ebwt::buildToDisk()
Returning from initFromVector
Wrote 6399705 bytes to primary EBWT file: /atium/Data/Nanopore/cpowgs/170816_BUCC/bcc_refs/blatens.rev.1.bt2
Wrote 1653624 bytes to secondary EBWT file: /atium/Data/Nanopore/cpowgs/170816_BUCC/bcc_refs/blatens.rev.2.bt2
Re-opening _in1 and _in2 as input streams
Returning from Ebwt constructor
Headers:
    len: 6614478
    bwtLen: 6614479
    sz: 1653620
    bwtSz: 1653620
    lineRate: 6
    offRate: 4
    offMask: 0xfffffff0
    ftabChars: 10
    eftabLen: 20
    eftabSz: 80
    ftabLen: 1048577
    ftabSz: 4194308
    offsLen: 413405
    offsSz: 1653620
    lineSz: 64
    sideSz: 64
    sideBwtSz: 48
    sideBwtLen: 192
    numSides: 34451
    numLines: 34451
    ebwtTotLen: 2204864
    ebwtTotSz: 2204864
    color: 0
    reverse: 1
Total time for backward call to driver() for mirror index: 00:00:03
Settings:
  Output files: "/atium/Data/Nanopore/cpowgs/170816_BUCC/bcc_refs/bmetallica.*.bt2"
  Line rate: 6 (line is 64 bytes)
  Lines per side: 1 (side is 64 bytes)
  Offset rate: 4 (one in 16)
  FTable chars: 10
  Strings: unpacked
  Max bucket size: default
  Max bucket size, sqrt multiplier: default
  Max bucket size, len divisor: 4
  Difference-cover sample period: 1024
  Endianness: little
  Actual local endianness: little
  Sanity checking: disabled
  Assertions: disabled
  Random seed: 0
  Sizeofs: void*:8, int:4, long:8, size_t:8
Input files DNA, FASTA:
  /atium/Data/Nanopore/cpowgs/170816_BUCC/bcc_refs/bmetallica.fa
Reading reference sizes
  Time reading reference sizes: 00:00:01
Calculating joined length
Writing header
Reserving space for joined string
Joining reference sequences
  Time to join reference sequences: 00:00:00
bmax according to bmaxDivN setting: 1856060
Using parameters --bmax 1392045 --dcv 1024
  Doing ahead-of-time memory usage test
  Passed!  Constructing with these parameters: --bmax 1392045 --dcv 1024
Constructing suffix-array element generator
Building DifferenceCoverSample
  Building sPrime
  Building sPrimeOrder
  V-Sorting samples
  V-Sorting samples time: 00:00:00
  Allocating rank array
  Ranking v-sort output
  Ranking v-sort output time: 00:00:00
  Invoking Larsson-Sadakane on ranks
  Invoking Larsson-Sadakane on ranks time: 00:00:00
  Sanity-checking and returning
Building samples
Reserving space for 12 sample suffixes
Generating random suffixes
QSorting 12 sample offsets, eliminating duplicates
QSorting sample offsets, eliminating duplicates time: 00:00:00
Multikey QSorting 12 samples
  (Using difference cover)
  Multikey QSorting samples time: 00:00:00
Calculating bucket sizes
  Binary sorting into buckets
  10%
  20%
  30%
  40%
  50%
  60%
  70%
  80%
  90%
  100%
  Binary sorting into buckets time: 00:00:00
Splitting and merging
  Splitting and merging time: 00:00:00
Split 1, merged 7; iterating...
  Binary sorting into buckets
  10%
  20%
  30%
  40%
  50%
  60%
  70%
  80%
  90%
  100%
  Binary sorting into buckets time: 00:00:01
Splitting and merging
  Splitting and merging time: 00:00:00
Avg bucket size: 1.0606e+06 (target: 1392044)
Converting suffix-array elements to index image
Allocating ftab, absorbFtab
Entering Ebwt loop
Getting block 1 of 7
  Reserving size (1392045) for bucket
  Calculating Z arrays
  Calculating Z arrays time: 00:00:00
  Entering block accumulator loop:
  10%
  20%
  30%
  40%
  50%
  60%
  70%
  80%
  90%
  100%
  Block accumulator loop time: 00:00:00
  Sorting block of length 1031019
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 1031020
Getting block 2 of 7
  Reserving size (1392045) for bucket
  Calculating Z arrays
  Calculating Z arrays time: 00:00:00
  Entering block accumulator loop:
  10%
  20%
  30%
  40%
  50%
  60%
  70%
  80%
  90%
  100%
  Block accumulator loop time: 00:00:00
  Sorting block of length 1228819
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 1228820
Getting block 3 of 7
  Reserving size (1392045) for bucket
  Calculating Z arrays
  Calculating Z arrays time: 00:00:00
  Entering block accumulator loop:
  10%
  20%
  30%
  40%
  50%
  60%
  70%
  80%
  90%
  100%
  Block accumulator loop time: 00:00:00
  Sorting block of length 1312532
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 1312533
Getting block 4 of 7
  Reserving size (1392045) for bucket
  Calculating Z arrays
  Calculating Z arrays time: 00:00:00
  Entering block accumulator loop:
  10%
  20%
  30%
  40%
  50%
  60%
  70%
  80%
  90%
  100%
  Block accumulator loop time: 00:00:00
  Sorting block of length 1068245
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 1068246
Getting block 5 of 7
  Reserving size (1392045) for bucket
  Calculating Z arrays
  Calculating Z arrays time: 00:00:00
  Entering block accumulator loop:
  10%
  20%
  30%
  40%
  50%
  60%
  70%
  80%
  90%
  100%
  Block accumulator loop time: 00:00:01
  Sorting block of length 496551
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 496552
Getting block 6 of 7
  Reserving size (1392045) for bucket
  Calculating Z arrays
  Calculating Z arrays time: 00:00:00
  Entering block accumulator loop:
  10%
  20%
  30%
  40%
  50%
  60%
  70%
  80%
  90%
  100%
  Block accumulator loop time: 00:00:00
  Sorting block of length 1304114
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 1304115
Getting block 7 of 7
  Reserving size (1392045) for bucket
  Calculating Z arrays
  Calculating Z arrays time: 00:00:00
  Entering block accumulator loop:
  10%
  20%
  30%
  40%
  50%
  60%
  70%
  80%
  90%
  100%
  Block accumulator loop time: 00:00:00
  Sorting block of length 982954
  (Using difference cover)
  Sorting block time: 00:00:01
Returning block of 982955
Exited Ebwt loop
fchr[A]: 0
fchr[C]: 1224163
fchr[G]: 3710635
fchr[T]: 6205073
fchr[$]: 7424240
Exiting Ebwt::buildToDisk()
Returning from initFromVector
Wrote 6669525 bytes to primary EBWT file: /atium/Data/Nanopore/cpowgs/170816_BUCC/bcc_refs/bmetallica.1.bt2
Wrote 1856068 bytes to secondary EBWT file: /atium/Data/Nanopore/cpowgs/170816_BUCC/bcc_refs/bmetallica.2.bt2
Re-opening _in1 and _in2 as input streams
Returning from Ebwt constructor
Headers:
    len: 7424240
    bwtLen: 7424241
    sz: 1856060
    bwtSz: 1856061
    lineRate: 6
    offRate: 4
    offMask: 0xfffffff0
    ftabChars: 10
    eftabLen: 20
    eftabSz: 80
    ftabLen: 1048577
    ftabSz: 4194308
    offsLen: 464016
    offsSz: 1856064
    lineSz: 64
    sideSz: 64
    sideBwtSz: 48
    sideBwtLen: 192
    numSides: 38668
    numLines: 38668
    ebwtTotLen: 2474752
    ebwtTotSz: 2474752
    color: 0
    reverse: 0
Total time for call to driver() for forward index: 00:00:05
Reading reference sizes
  Time reading reference sizes: 00:00:00
Calculating joined length
Writing header
Reserving space for joined string
Joining reference sequences
  Time to join reference sequences: 00:00:00
  Time to reverse reference sequence: 00:00:00
bmax according to bmaxDivN setting: 1856060
Using parameters --bmax 1392045 --dcv 1024
  Doing ahead-of-time memory usage test
  Passed!  Constructing with these parameters: --bmax 1392045 --dcv 1024
Constructing suffix-array element generator
Building DifferenceCoverSample
  Building sPrime
  Building sPrimeOrder
  V-Sorting samples
  V-Sorting samples time: 00:00:00
  Allocating rank array
  Ranking v-sort output
  Ranking v-sort output time: 00:00:00
  Invoking Larsson-Sadakane on ranks
  Invoking Larsson-Sadakane on ranks time: 00:00:00
  Sanity-checking and returning
Building samples
Reserving space for 12 sample suffixes
Generating random suffixes
QSorting 12 sample offsets, eliminating duplicates
QSorting sample offsets, eliminating duplicates time: 00:00:00
Multikey QSorting 12 samples
  (Using difference cover)
  Multikey QSorting samples time: 00:00:00
Calculating bucket sizes
  Binary sorting into buckets
  10%
  20%
  30%
  40%
  50%
  60%
  70%
  80%
  90%
  100%
  Binary sorting into buckets time: 00:00:01
Splitting and merging
  Splitting and merging time: 00:00:00
Split 1, merged 7; iterating...
  Binary sorting into buckets
  10%
  20%
  30%
  40%
  50%
  60%
  70%
  80%
  90%
  100%
  Binary sorting into buckets time: 00:00:00
Splitting and merging
  Splitting and merging time: 00:00:00
Split 1, merged 1; iterating...
  Binary sorting into buckets
  10%
  20%
  30%
  40%
  50%
  60%
  70%
  80%
  90%
  100%
  Binary sorting into buckets time: 00:00:00
Splitting and merging
  Splitting and merging time: 00:00:00
Avg bucket size: 1.0606e+06 (target: 1392044)
Converting suffix-array elements to index image
Allocating ftab, absorbFtab
Entering Ebwt loop
Getting block 1 of 7
  Reserving size (1392045) for bucket
  Calculating Z arrays
  Calculating Z arrays time: 00:00:00
  Entering block accumulator loop:
  10%
  20%
  30%
  40%
  50%
  60%
  70%
  80%
  90%
  100%
  Block accumulator loop time: 00:00:01
  Sorting block of length 1293568
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 1293569
Getting block 2 of 7
  Reserving size (1392045) for bucket
  Calculating Z arrays
  Calculating Z arrays time: 00:00:00
  Entering block accumulator loop:
  10%
  20%
  30%
  40%
  50%
  60%
  70%
  80%
  90%
  100%
  Block accumulator loop time: 00:00:00
  Sorting block of length 853257
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 853258
Getting block 3 of 7
  Reserving size (1392045) for bucket
  Calculating Z arrays
  Calculating Z arrays time: 00:00:00
  Entering block accumulator loop:
  10%
  20%
  30%
  40%
  50%
  60%
  70%
  80%
  90%
  100%
  Block accumulator loop time: 00:00:00
  Sorting block of length 874835
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 874836
Getting block 4 of 7
  Reserving size (1392045) for bucket
  Calculating Z arrays
  Calculating Z arrays time: 00:00:00
  Entering block accumulator loop:
  10%
  20%
  30%
  40%
  50%
  60%
  70%
  80%
  90%
  100%
  Block accumulator loop time: 00:00:00
  Sorting block of length 646335
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 646336
Getting block 5 of 7
  Reserving size (1392045) for bucket
  Calculating Z arrays
  Calculating Z arrays time: 00:00:00
  Entering block accumulator loop:
  10%
  20%
  30%
  40%
  50%
  60%
  70%
  80%
  90%
  100%
  Block accumulator loop time: 00:00:00
  Sorting block of length 1317246
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 1317247
Getting block 6 of 7
  Reserving size (1392045) for bucket
  Calculating Z arrays
  Calculating Z arrays time: 00:00:00
  Entering block accumulator loop:
  10%
  20%
  30%
  40%
  50%
  60%
  70%
  80%
  90%
  100%
  Block accumulator loop time: 00:00:00
  Sorting block of length 1148635
  (Using difference cover)
  Sorting block time: 00:00:01
Returning block of 1148636
Getting block 7 of 7
  Reserving size (1392045) for bucket
  Calculating Z arrays
  Calculating Z arrays time: 00:00:00
  Entering block accumulator loop:
  10%
  20%
  30%
  40%
  50%
  60%
  70%
  80%
  90%
  100%
  Block accumulator loop time: 00:00:00
  Sorting block of length 1290358
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 1290359
Exited Ebwt loop
fchr[A]: 0
fchr[C]: 1224163
fchr[G]: 3710635
fchr[T]: 6205073
fchr[$]: 7424240
Exiting Ebwt::buildToDisk()
Returning from initFromVector
Wrote 6669525 bytes to primary EBWT file: /atium/Data/Nanopore/cpowgs/170816_BUCC/bcc_refs/bmetallica.rev.1.bt2
Wrote 1856068 bytes to secondary EBWT file: /atium/Data/Nanopore/cpowgs/170816_BUCC/bcc_refs/bmetallica.rev.2.bt2
Re-opening _in1 and _in2 as input streams
Returning from Ebwt constructor
Headers:
    len: 7424240
    bwtLen: 7424241
    sz: 1856060
    bwtSz: 1856061
    lineRate: 6
    offRate: 4
    offMask: 0xfffffff0
    ftabChars: 10
    eftabLen: 20
    eftabSz: 80
    ftabLen: 1048577
    ftabSz: 4194308
    offsLen: 464016
    offsSz: 1856064
    lineSz: 64
    sideSz: 64
    sideBwtSz: 48
    sideBwtLen: 192
    numSides: 38668
    numLines: 38668
    ebwtTotLen: 2474752
    ebwtTotSz: 2474752
    color: 0
    reverse: 1
Total time for backward call to driver() for mirror index: 00:00:04
Settings:
  Output files: "/atium/Data/Nanopore/cpowgs/170816_BUCC/bcc_refs/bmultivorans.*.bt2"
  Line rate: 6 (line is 64 bytes)
  Lines per side: 1 (side is 64 bytes)
  Offset rate: 4 (one in 16)
  FTable chars: 10
  Strings: unpacked
  Max bucket size: default
  Max bucket size, sqrt multiplier: default
  Max bucket size, len divisor: 4
  Difference-cover sample period: 1024
  Endianness: little
  Actual local endianness: little
  Sanity checking: disabled
  Assertions: disabled
  Random seed: 0
  Sizeofs: void*:8, int:4, long:8, size_t:8
Input files DNA, FASTA:
  /atium/Data/Nanopore/cpowgs/170816_BUCC/bcc_refs/bmultivorans.fa
Reading reference sizes
  Time reading reference sizes: 00:00:00
Calculating joined length
Writing header
Reserving space for joined string
Joining reference sequences
  Time to join reference sequences: 00:00:00
bmax according to bmaxDivN setting: 1580686
Using parameters --bmax 1185515 --dcv 1024
  Doing ahead-of-time memory usage test
  Passed!  Constructing with these parameters: --bmax 1185515 --dcv 1024
Constructing suffix-array element generator
Building DifferenceCoverSample
  Building sPrime
  Building sPrimeOrder
  V-Sorting samples
  V-Sorting samples time: 00:00:00
  Allocating rank array
  Ranking v-sort output
  Ranking v-sort output time: 00:00:00
  Invoking Larsson-Sadakane on ranks
  Invoking Larsson-Sadakane on ranks time: 00:00:00
  Sanity-checking and returning
Building samples
Reserving space for 12 sample suffixes
Generating random suffixes
QSorting 12 sample offsets, eliminating duplicates
QSorting sample offsets, eliminating duplicates time: 00:00:00
Multikey QSorting 12 samples
  (Using difference cover)
  Multikey QSorting samples time: 00:00:00
Calculating bucket sizes
  Binary sorting into buckets
  10%
  20%
  30%
  40%
  50%
  60%
  70%
  80%
  90%
  100%
  Binary sorting into buckets time: 00:00:01
Splitting and merging
  Splitting and merging time: 00:00:00
Split 2, merged 6; iterating...
  Binary sorting into buckets
  10%
  20%
  30%
  40%
  50%
  60%
  70%
  80%
  90%
  100%
  Binary sorting into buckets time: 00:00:00
Splitting and merging
  Splitting and merging time: 00:00:00
Split 1, merged 2; iterating...
  Binary sorting into buckets
  10%
  20%
  30%
  40%
  50%
  60%
  70%
  80%
  90%
  100%
  Binary sorting into buckets time: 00:00:00
Splitting and merging
  Splitting and merging time: 00:00:00
Avg bucket size: 903249 (target: 1185514)
Converting suffix-array elements to index image
Allocating ftab, absorbFtab
Entering Ebwt loop
Getting block 1 of 7
  Reserving size (1185515) for bucket
  Calculating Z arrays
  Calculating Z arrays time: 00:00:00
  Entering block accumulator loop:
  10%
  20%
  30%
  40%
  50%
  60%
  70%
  80%
  90%
  100%
  Block accumulator loop time: 00:00:00
  Sorting block of length 888358
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 888359
Getting block 2 of 7
  Reserving size (1185515) for bucket
  Calculating Z arrays
  Calculating Z arrays time: 00:00:00
  Entering block accumulator loop:
  10%
  20%
  30%
  40%
  50%
  60%
  70%
  80%
  90%
  100%
  Block accumulator loop time: 00:00:00
  Sorting block of length 1048192
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 1048193
Getting block 3 of 7
  Reserving size (1185515) for bucket
  Calculating Z arrays
  Calculating Z arrays time: 00:00:00
  Entering block accumulator loop:
  10%
  20%
  30%
  40%
  50%
  60%
  70%
  80%
  90%
  100%
  Block accumulator loop time: 00:00:00
  Sorting block of length 972435
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 972436
Getting block 4 of 7
  Reserving size (1185515) for bucket
  Calculating Z arrays
  Calculating Z arrays time: 00:00:00
  Entering block accumulator loop:
  10%
  20%
  30%
  40%
  50%
  60%
  70%
  80%
  90%
  100%
  Block accumulator loop time: 00:00:00
  Sorting block of length 913078
  (Using difference cover)
  Sorting block time: 00:00:01
Returning block of 913079
Getting block 5 of 7
  Reserving size (1185515) for bucket
  Calculating Z arrays
  Calculating Z arrays time: 00:00:00
  Entering block accumulator loop:
  10%
  20%
  30%
  40%
  50%
  60%
  70%
  80%
  90%
  100%
  Block accumulator loop time: 00:00:00
  Sorting block of length 967449
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 967450
Getting block 6 of 7
  Reserving size (1185515) for bucket
  Calculating Z arrays
  Calculating Z arrays time: 00:00:00
  Entering block accumulator loop:
  10%
  20%
  30%
  40%
  50%
  60%
  70%
  80%
  90%
  100%
  Block accumulator loop time: 00:00:00
  Sorting block of length 861485
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 861486
Getting block 7 of 7
  Reserving size (1185515) for bucket
  Calculating Z arrays
  Calculating Z arrays time: 00:00:00
  Entering block accumulator loop:
  10%
  20%
  30%
  40%
  50%
  60%
  70%
  80%
  90%
  100%
  Block accumulator loop time: 00:00:00
  Sorting block of length 671743
  (Using difference cover)
  Sorting block time: 00:00:01
Returning block of 671744
Exited Ebwt loop
fchr[A]: 0
fchr[C]: 1037986
fchr[G]: 3164793
fchr[T]: 5289522
fchr[$]: 6322746
Exiting Ebwt::buildToDisk()
Returning from initFromVector
Wrote 6302333 bytes to primary EBWT file: /atium/Data/Nanopore/cpowgs/170816_BUCC/bcc_refs/bmultivorans.1.bt2
Wrote 1580692 bytes to secondary EBWT file: /atium/Data/Nanopore/cpowgs/170816_BUCC/bcc_refs/bmultivorans.2.bt2
Re-opening _in1 and _in2 as input streams
Returning from Ebwt constructor
Headers:
    len: 6322746
    bwtLen: 6322747
    sz: 1580687
    bwtSz: 1580687
    lineRate: 6
    offRate: 4
    offMask: 0xfffffff0
    ftabChars: 10
    eftabLen: 20
    eftabSz: 80
    ftabLen: 1048577
    ftabSz: 4194308
    offsLen: 395172
    offsSz: 1580688
    lineSz: 64
    sideSz: 64
    sideBwtSz: 48
    sideBwtLen: 192
    numSides: 32931
    numLines: 32931
    ebwtTotLen: 2107584
    ebwtTotSz: 2107584
    color: 0
    reverse: 0
Total time for call to driver() for forward index: 00:00:04
Reading reference sizes
  Time reading reference sizes: 00:00:00
Calculating joined length
Writing header
Reserving space for joined string
Joining reference sequences
  Time to join reference sequences: 00:00:00
  Time to reverse reference sequence: 00:00:00
bmax according to bmaxDivN setting: 1580686
Using parameters --bmax 1185515 --dcv 1024
  Doing ahead-of-time memory usage test
  Passed!  Constructing with these parameters: --bmax 1185515 --dcv 1024
Constructing suffix-array element generator
Building DifferenceCoverSample
  Building sPrime
  Building sPrimeOrder
  V-Sorting samples
  V-Sorting samples time: 00:00:00
  Allocating rank array
  Ranking v-sort output
  Ranking v-sort output time: 00:00:00
  Invoking Larsson-Sadakane on ranks
  Invoking Larsson-Sadakane on ranks time: 00:00:00
  Sanity-checking and returning
Building samples
Reserving space for 12 sample suffixes
Generating random suffixes
QSorting 12 sample offsets, eliminating duplicates
QSorting sample offsets, eliminating duplicates time: 00:00:00
Multikey QSorting 12 samples
  (Using difference cover)
  Multikey QSorting samples time: 00:00:00
Calculating bucket sizes
  Binary sorting into buckets
  10%
  20%
  30%
  40%
  50%
  60%
  70%
  80%
  90%
  100%
  Binary sorting into buckets time: 00:00:00
Splitting and merging
  Splitting and merging time: 00:00:00
Avg bucket size: 903249 (target: 1185514)
Converting suffix-array elements to index image
Allocating ftab, absorbFtab
Entering Ebwt loop
Getting block 1 of 7
  Reserving size (1185515) for bucket
  Calculating Z arrays
  Calculating Z arrays time: 00:00:00
  Entering block accumulator loop:
  10%
  20%
  30%
  40%
  50%
  60%
  70%
  80%
  90%
  100%
  Block accumulator loop time: 00:00:00
  Sorting block of length 683620
  (Using difference cover)
  Sorting block time: 00:00:01
Returning block of 683621
Getting block 2 of 7
  Reserving size (1185515) for bucket
  Calculating Z arrays
  Calculating Z arrays time: 00:00:00
  Entering block accumulator loop:
  10%
  20%
  30%
  40%
  50%
  60%
  70%
  80%
  90%
  100%
  Block accumulator loop time: 00:00:00
  Sorting block of length 1126380
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 1126381
Getting block 3 of 7
  Reserving size (1185515) for bucket
  Calculating Z arrays
  Calculating Z arrays time: 00:00:00
  Entering block accumulator loop:
  10%
  20%
  30%
  40%
  50%
  60%
  70%
  80%
  90%
  100%
  Block accumulator loop time: 00:00:00
  Sorting block of length 855706
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 855707
Getting block 4 of 7
  Reserving size (1185515) for bucket
  Calculating Z arrays
  Calculating Z arrays time: 00:00:00
  Entering block accumulator loop:
  10%
  20%
  30%
  40%
  50%
  60%
  70%
  80%
  90%
  100%
  Block accumulator loop time: 00:00:01
  Sorting block of length 963716
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 963717
Getting block 5 of 7
  Reserving size (1185515) for bucket
  Calculating Z arrays
  Calculating Z arrays time: 00:00:00
  Entering block accumulator loop:
  10%
  20%
  30%
  40%
  50%
  60%
  70%
  80%
  90%
  100%
  Block accumulator loop time: 00:00:00
  Sorting block of length 1140235
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 1140236
Getting block 6 of 7
  Reserving size (1185515) for bucket
  Calculating Z arrays
  Calculating Z arrays time: 00:00:00
  Entering block accumulator loop:
  10%
  20%
  30%
  40%
  50%
  60%
  70%
  80%
  90%
  100%
  Block accumulator loop time: 00:00:00
  Sorting block of length 797022
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 797023
Getting block 7 of 7
  Reserving size (1185515) for bucket
  Calculating Z arrays
  Calculating Z arrays time: 00:00:00
  Entering block accumulator loop:
  10%
  20%
  30%
  40%
  50%
  60%
  70%
  80%
  90%
  100%
  Block accumulator loop time: 00:00:01
  Sorting block of length 756061
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 756062
Exited Ebwt loop
fchr[A]: 0
fchr[C]: 1037986
fchr[G]: 3164793
fchr[T]: 5289522
fchr[$]: 6322746
Exiting Ebwt::buildToDisk()
Returning from initFromVector
Wrote 6302333 bytes to primary EBWT file: /atium/Data/Nanopore/cpowgs/170816_BUCC/bcc_refs/bmultivorans.rev.1.bt2
Wrote 1580692 bytes to secondary EBWT file: /atium/Data/Nanopore/cpowgs/170816_BUCC/bcc_refs/bmultivorans.rev.2.bt2
Re-opening _in1 and _in2 as input streams
Returning from Ebwt constructor
Headers:
    len: 6322746
    bwtLen: 6322747
    sz: 1580687
    bwtSz: 1580687
    lineRate: 6
    offRate: 4
    offMask: 0xfffffff0
    ftabChars: 10
    eftabLen: 20
    eftabSz: 80
    ftabLen: 1048577
    ftabSz: 4194308
    offsLen: 395172
    offsSz: 1580688
    lineSz: 64
    sideSz: 64
    sideBwtSz: 48
    sideBwtLen: 192
    numSides: 32931
    numLines: 32931
    ebwtTotLen: 2107584
    ebwtTotSz: 2107584
    color: 0
    reverse: 1
Total time for backward call to driver() for mirror index: 00:00:03
Settings:
  Output files: "/atium/Data/Nanopore/cpowgs/170816_BUCC/bcc_refs/bpseudomultivorans.*.bt2"
  Line rate: 6 (line is 64 bytes)
  Lines per side: 1 (side is 64 bytes)
  Offset rate: 4 (one in 16)
  FTable chars: 10
  Strings: unpacked
  Max bucket size: default
  Max bucket size, sqrt multiplier: default
  Max bucket size, len divisor: 4
  Difference-cover sample period: 1024
  Endianness: little
  Actual local endianness: little
  Sanity checking: disabled
  Assertions: disabled
  Random seed: 0
  Sizeofs: void*:8, int:4, long:8, size_t:8
Input files DNA, FASTA:
  /atium/Data/Nanopore/cpowgs/170816_BUCC/bcc_refs/bpseudomultivorans.fa
Reading reference sizes
  Time reading reference sizes: 00:00:00
Calculating joined length
Writing header
Reserving space for joined string
Joining reference sequences
  Time to join reference sequences: 00:00:00
bmax according to bmaxDivN setting: 1989197
Using parameters --bmax 1491898 --dcv 1024
  Doing ahead-of-time memory usage test
  Passed!  Constructing with these parameters: --bmax 1491898 --dcv 1024
Constructing suffix-array element generator
Building DifferenceCoverSample
  Building sPrime
  Building sPrimeOrder
  V-Sorting samples
  V-Sorting samples time: 00:00:00
  Allocating rank array
  Ranking v-sort output
  Ranking v-sort output time: 00:00:00
  Invoking Larsson-Sadakane on ranks
  Invoking Larsson-Sadakane on ranks time: 00:00:00
  Sanity-checking and returning
Building samples
Reserving space for 12 sample suffixes
Generating random suffixes
QSorting 12 sample offsets, eliminating duplicates
QSorting sample offsets, eliminating duplicates time: 00:00:00
Multikey QSorting 12 samples
  (Using difference cover)
  Multikey QSorting samples time: 00:00:00
Calculating bucket sizes
  Binary sorting into buckets
  10%
  20%
  30%
  40%
  50%
  60%
  70%
  80%
  90%
  100%
  Binary sorting into buckets time: 00:00:00
Splitting and merging
  Splitting and merging time: 00:00:00
Split 1, merged 6; iterating...
  Binary sorting into buckets
  10%
  20%
  30%
  40%
  50%
  60%
  70%
  80%
  90%
  100%
  Binary sorting into buckets time: 00:00:01
Splitting and merging
  Splitting and merging time: 00:00:00
Split 1, merged 1; iterating...
  Binary sorting into buckets
  10%
  20%
  30%
  40%
  50%
  60%
  70%
  80%
  90%
  100%
  Binary sorting into buckets time: 00:00:00
Splitting and merging
  Splitting and merging time: 00:00:00
Avg bucket size: 994598 (target: 1491897)
Converting suffix-array elements to index image
Allocating ftab, absorbFtab
Entering Ebwt loop
Getting block 1 of 8
  Reserving size (1491898) for bucket
  Calculating Z arrays
  Calculating Z arrays time: 00:00:00
  Entering block accumulator loop:
  10%
  20%
  30%
  40%
  50%
  60%
  70%
  80%
  90%
  100%
  Block accumulator loop time: 00:00:00
  Sorting block of length 966831
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 966832
Getting block 2 of 8
  Reserving size (1491898) for bucket
  Calculating Z arrays
  Calculating Z arrays time: 00:00:00
  Entering block accumulator loop:
  10%
  20%
  30%
  40%
  50%
  60%
  70%
  80%
  90%
  100%
  Block accumulator loop time: 00:00:00
  Sorting block of length 1234759
  (Using difference cover)
  Sorting block time: 00:00:01
Returning block of 1234760
Getting block 3 of 8
  Reserving size (1491898) for bucket
  Calculating Z arrays
  Calculating Z arrays time: 00:00:00
  Entering block accumulator loop:
  10%
  20%
  30%
  40%
  50%
  60%
  70%
  80%
  90%
  100%
  Block accumulator loop time: 00:00:00
  Sorting block of length 278551
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 278552
Getting block 4 of 8
  Reserving size (1491898) for bucket
  Calculating Z arrays
  Calculating Z arrays time: 00:00:00
  Entering block accumulator loop:
  10%
  20%
  30%
  40%
  50%
  60%
  70%
  80%
  90%
  100%
  Block accumulator loop time: 00:00:00
  Sorting block of length 1243776
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 1243777
Getting block 5 of 8
  Reserving size (1491898) for bucket
  Calculating Z arrays
  Calculating Z arrays time: 00:00:00
  Entering block accumulator loop:
  10%
  20%
  30%
  40%
  50%
  60%
  70%
  80%
  90%
  100%
  Block accumulator loop time: 00:00:00
  Sorting block of length 461683
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 461684
Getting block 6 of 8
  Reserving size (1491898) for bucket
  Calculating Z arrays
  Calculating Z arrays time: 00:00:00
  Entering block accumulator loop:
  10%
  20%
  30%
  40%
  50%
  60%
  70%
  80%
  90%
  100%
  Block accumulator loop time: 00:00:00
  Sorting block of length 1415413
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 1415414
Getting block 7 of 8
  Reserving size (1491898) for bucket
  Calculating Z arrays
  Calculating Z arrays time: 00:00:00
  Entering block accumulator loop:
  10%
  20%
  30%
  40%
  50%
  60%
  70%
  80%
  90%
  100%
  Block accumulator loop time: 00:00:01
  Sorting block of length 1238619
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 1238620
Getting block 8 of 8
  Reserving size (1491898) for bucket
  Calculating Z arrays
  Calculating Z arrays time: 00:00:00
  Entering block accumulator loop:
  10%
  20%
  30%
  40%
  50%
  60%
  70%
  80%
  90%
  100%
  Block accumulator loop time: 00:00:00
  Sorting block of length 1117150
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 1117151
Exited Ebwt loop
fchr[A]: 0
fchr[C]: 1302235
fchr[G]: 3973139
fchr[T]: 6657042
fchr[$]: 7956789
Exiting Ebwt::buildToDisk()
Returning from initFromVector
Wrote 6847081 bytes to primary EBWT file: /atium/Data/Nanopore/cpowgs/170816_BUCC/bcc_refs/bpseudomultivorans.1.bt2
Wrote 1989204 bytes to secondary EBWT file: /atium/Data/Nanopore/cpowgs/170816_BUCC/bcc_refs/bpseudomultivorans.2.bt2
Re-opening _in1 and _in2 as input streams
Returning from Ebwt constructor
Headers:
    len: 7956789
    bwtLen: 7956790
    sz: 1989198
    bwtSz: 1989198
    lineRate: 6
    offRate: 4
    offMask: 0xfffffff0
    ftabChars: 10
    eftabLen: 20
    eftabSz: 80
    ftabLen: 1048577
    ftabSz: 4194308
    offsLen: 497300
    offsSz: 1989200
    lineSz: 64
    sideSz: 64
    sideBwtSz: 48
    sideBwtLen: 192
    numSides: 41442
    numLines: 41442
    ebwtTotLen: 2652288
    ebwtTotSz: 2652288
    color: 0
    reverse: 0
Total time for call to driver() for forward index: 00:00:05
Reading reference sizes
  Time reading reference sizes: 00:00:01
Calculating joined length
Writing header
Reserving space for joined string
Joining reference sequences
  Time to join reference sequences: 00:00:00
  Time to reverse reference sequence: 00:00:00
bmax according to bmaxDivN setting: 1989197
Using parameters --bmax 1491898 --dcv 1024
  Doing ahead-of-time memory usage test
  Passed!  Constructing with these parameters: --bmax 1491898 --dcv 1024
Constructing suffix-array element generator
Building DifferenceCoverSample
  Building sPrime
  Building sPrimeOrder
  V-Sorting samples
  V-Sorting samples time: 00:00:00
  Allocating rank array
  Ranking v-sort output
  Ranking v-sort output time: 00:00:00
  Invoking Larsson-Sadakane on ranks
  Invoking Larsson-Sadakane on ranks time: 00:00:00
  Sanity-checking and returning
Building samples
Reserving space for 12 sample suffixes
Generating random suffixes
QSorting 12 sample offsets, eliminating duplicates
QSorting sample offsets, eliminating duplicates time: 00:00:00
Multikey QSorting 12 samples
  (Using difference cover)
  Multikey QSorting samples time: 00:00:00
Calculating bucket sizes
  Binary sorting into buckets
  10%
  20%
  30%
  40%
  50%
  60%
  70%
  80%
  90%
  100%
  Binary sorting into buckets time: 00:00:00
Splitting and merging
  Splitting and merging time: 00:00:00
Split 1, merged 6; iterating...
  Binary sorting into buckets
  10%
  20%
  30%
  40%
  50%
  60%
  70%
  80%
  90%
  100%
  Binary sorting into buckets time: 00:00:01
Splitting and merging
  Splitting and merging time: 00:00:00
Avg bucket size: 994598 (target: 1491897)
Converting suffix-array elements to index image
Allocating ftab, absorbFtab
Entering Ebwt loop
Getting block 1 of 8
  Reserving size (1491898) for bucket
  Calculating Z arrays
  Calculating Z arrays time: 00:00:00
  Entering block accumulator loop:
  10%
  20%
  30%
  40%
  50%
  60%
  70%
  80%
  90%
  100%
  Block accumulator loop time: 00:00:00
  Sorting block of length 949825
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 949826
Getting block 2 of 8
  Reserving size (1491898) for bucket
  Calculating Z arrays
  Calculating Z arrays time: 00:00:00
  Entering block accumulator loop:
  10%
  20%
  30%
  40%
  50%
  60%
  70%
  80%
  90%
  100%
  Block accumulator loop time: 00:00:00
  Sorting block of length 1142934
  (Using difference cover)
  Sorting block time: 00:00:01
Returning block of 1142935
Getting block 3 of 8
  Reserving size (1491898) for bucket
  Calculating Z arrays
  Calculating Z arrays time: 00:00:00
  Entering block accumulator loop:
  10%
  20%
  30%
  40%
  50%
  60%
  70%
  80%
  90%
  100%
  Block accumulator loop time: 00:00:00
  Sorting block of length 1409972
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 1409973
Getting block 4 of 8
  Reserving size (1491898) for bucket
  Calculating Z arrays
  Calculating Z arrays time: 00:00:00
  Entering block accumulator loop:
  10%
  20%
  30%
  40%
  50%
  60%
  70%
  80%
  90%
  100%
  Block accumulator loop time: 00:00:00
  Sorting block of length 164792
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 164793
Getting block 5 of 8
  Reserving size (1491898) for bucket
  Calculating Z arrays
  Calculating Z arrays time: 00:00:00
  Entering block accumulator loop:
  10%
  20%
  30%
  40%
  50%
  60%
  70%
  80%
  90%
  100%
  Block accumulator loop time: 00:00:01
  Sorting block of length 1388775
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 1388776
Getting block 6 of 8
  Reserving size (1491898) for bucket
  Calculating Z arrays
  Calculating Z arrays time: 00:00:00
  Entering block accumulator loop:
  10%
  20%
  30%
  40%
  50%
  60%
  70%
  80%
  90%
  100%
  Block accumulator loop time: 00:00:00
  Sorting block of length 1326691
  (Using difference cover)
  Sorting block time: 00:00:01
Returning block of 1326692
Getting block 7 of 8
  Reserving size (1491898) for bucket
  Calculating Z arrays
  Calculating Z arrays time: 00:00:00
  Entering block accumulator loop:
  10%
  20%
  30%
  40%
  50%
  60%
  70%
  80%
  90%
  100%
  Block accumulator loop time: 00:00:00
  Sorting block of length 583254
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 583255
Getting block 8 of 8
  Reserving size (1491898) for bucket
  Calculating Z arrays
  Calculating Z arrays time: 00:00:00
  Entering block accumulator loop:
  10%
  20%
  30%
  40%
  50%
  60%
  70%
  80%
  90%
  100%
  Block accumulator loop time: 00:00:00
  Sorting block of length 990539
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 990540
Exited Ebwt loop
fchr[A]: 0
fchr[C]: 1302235
fchr[G]: 3973139
fchr[T]: 6657042
fchr[$]: 7956789
Exiting Ebwt::buildToDisk()
Returning from initFromVector
Wrote 6847081 bytes to primary EBWT file: /atium/Data/Nanopore/cpowgs/170816_BUCC/bcc_refs/bpseudomultivorans.rev.1.bt2
Wrote 1989204 bytes to secondary EBWT file: /atium/Data/Nanopore/cpowgs/170816_BUCC/bcc_refs/bpseudomultivorans.rev.2.bt2
Re-opening _in1 and _in2 as input streams
Returning from Ebwt constructor
Headers:
    len: 7956789
    bwtLen: 7956790
    sz: 1989198
    bwtSz: 1989198
    lineRate: 6
    offRate: 4
    offMask: 0xfffffff0
    ftabChars: 10
    eftabLen: 20
    eftabSz: 80
    ftabLen: 1048577
    ftabSz: 4194308
    offsLen: 497300
    offsSz: 1989200
    lineSz: 64
    sideSz: 64
    sideBwtSz: 48
    sideBwtLen: 192
    numSides: 41442
    numLines: 41442
    ebwtTotLen: 2652288
    ebwtTotSz: 2652288
    color: 0
    reverse: 1
Total time for backward call to driver() for mirror index: 00:00:05
Settings:
  Output files: "/atium/Data/Nanopore/cpowgs/170816_BUCC/bcc_refs/bpyrrocinia.*.bt2"
  Line rate: 6 (line is 64 bytes)
  Lines per side: 1 (side is 64 bytes)
  Offset rate: 4 (one in 16)
  FTable chars: 10
  Strings: unpacked
  Max bucket size: default
  Max bucket size, sqrt multiplier: default
  Max bucket size, len divisor: 4
  Difference-cover sample period: 1024
  Endianness: little
  Actual local endianness: little
  Sanity checking: disabled
  Assertions: disabled
  Random seed: 0
  Sizeofs: void*:8, int:4, long:8, size_t:8
Input files DNA, FASTA:
  /atium/Data/Nanopore/cpowgs/170816_BUCC/bcc_refs/bpyrrocinia.fa
Reading reference sizes
  Time reading reference sizes: 00:00:01
Calculating joined length
Writing header
Reserving space for joined string
Joining reference sequences
  Time to join reference sequences: 00:00:00
bmax according to bmaxDivN setting: 1990336
Using parameters --bmax 1492752 --dcv 1024
  Doing ahead-of-time memory usage test
  Passed!  Constructing with these parameters: --bmax 1492752 --dcv 1024
Constructing suffix-array element generator
Building DifferenceCoverSample
  Building sPrime
  Building sPrimeOrder
  V-Sorting samples
  V-Sorting samples time: 00:00:00
  Allocating rank array
  Ranking v-sort output
  Ranking v-sort output time: 00:00:00
  Invoking Larsson-Sadakane on ranks
  Invoking Larsson-Sadakane on ranks time: 00:00:00
  Sanity-checking and returning
Building samples
Reserving space for 12 sample suffixes
Generating random suffixes
QSorting 12 sample offsets, eliminating duplicates
QSorting sample offsets, eliminating duplicates time: 00:00:00
Multikey QSorting 12 samples
  (Using difference cover)
  Multikey QSorting samples time: 00:00:00
Calculating bucket sizes
  Binary sorting into buckets
  10%
  20%
  30%
  40%
  50%
  60%
  70%
  80%
  90%
  100%
  Binary sorting into buckets time: 00:00:00
Splitting and merging
  Splitting and merging time: 00:00:00
Split 1, merged 7; iterating...
  Binary sorting into buckets
  10%
  20%
  30%
  40%
  50%
  60%
  70%
  80%
  90%
  100%
  Binary sorting into buckets time: 00:00:01
Splitting and merging
  Splitting and merging time: 00:00:00
Split 1, merged 0; iterating...
  Binary sorting into buckets
  10%
  20%
  30%
  40%
  50%
  60%
  70%
  80%
  90%
  100%
  Binary sorting into buckets time: 00:00:00
Splitting and merging
  Splitting and merging time: 00:00:00
Avg bucket size: 995167 (target: 1492751)
Converting suffix-array elements to index image
Allocating ftab, absorbFtab
Entering Ebwt loop
Getting block 1 of 8
  Reserving size (1492752) for bucket
  Calculating Z arrays
  Calculating Z arrays time: 00:00:00
  Entering block accumulator loop:
  10%
  20%
  30%
  40%
  50%
  60%
  70%
  80%
  90%
  100%
  Block accumulator loop time: 00:00:00
  Sorting block of length 933079
  (Using difference cover)
  Sorting block time: 00:00:01
Returning block of 933080
Getting block 2 of 8
  Reserving size (1492752) for bucket
  Calculating Z arrays
  Calculating Z arrays time: 00:00:00
  Entering block accumulator loop:
  10%
  20%
  30%
  40%
  50%
  60%
  70%
  80%
  90%
  100%
  Block accumulator loop time: 00:00:00
  Sorting block of length 662329
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 662330
Getting block 3 of 8
  Reserving size (1492752) for bucket
  Calculating Z arrays
  Calculating Z arrays time: 00:00:00
  Entering block accumulator loop:
  10%
  20%
  30%
  40%
  50%
  60%
  70%
  80%
  90%
  100%
  Block accumulator loop time: 00:00:00
  Sorting block of length 1123984
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 1123985
Getting block 4 of 8
  Reserving size (1492752) for bucket
  Calculating Z arrays
  Calculating Z arrays time: 00:00:00
  Entering block accumulator loop:
  10%
  20%
  30%
  40%
  50%
  60%
  70%
  80%
  90%
  100%
  Block accumulator loop time: 00:00:01
  Sorting block of length 572801
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 572802
Getting block 5 of 8
  Reserving size (1492752) for bucket
  Calculating Z arrays
  Calculating Z arrays time: 00:00:00
  Entering block accumulator loop:
  10%
  20%
  30%
  40%
  50%
  60%
  70%
  80%
  90%
  100%
  Block accumulator loop time: 00:00:00
  Sorting block of length 1150720
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 1150721
Getting block 6 of 8
  Reserving size (1492752) for bucket
  Calculating Z arrays
  Calculating Z arrays time: 00:00:00
  Entering block accumulator loop:
  10%
  20%
  30%
  40%
  50%
  60%
  70%
  80%
  90%
  100%
  Block accumulator loop time: 00:00:00
  Sorting block of length 1405162
  (Using difference cover)
  Sorting block time: 00:00:01
Returning block of 1405163
Getting block 7 of 8
  Reserving size (1492752) for bucket
  Calculating Z arrays
  Calculating Z arrays time: 00:00:00
  Entering block accumulator loop:
  10%
  20%
  30%
  40%
  50%
  60%
  70%
  80%
  90%
  100%
  Block accumulator loop time: 00:00:00
  Sorting block of length 1367710
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 1367711
Getting block 8 of 8
  Reserving size (1492752) for bucket
  Calculating Z arrays
  Calculating Z arrays time: 00:00:00
  Entering block accumulator loop:
  10%
  20%
  30%
  40%
  50%
  60%
  70%
  80%
  90%
  100%
  Block accumulator loop time: 00:00:00
  Sorting block of length 745554
  (Using difference cover)
  Sorting block time: 00:00:01
Returning block of 745555
Exited Ebwt loop
fchr[A]: 0
fchr[C]: 1333887
fchr[G]: 3973627
fchr[T]: 6624905
fchr[$]: 7961346
Exiting Ebwt::buildToDisk()
Returning from initFromVector
Wrote 6848686 bytes to primary EBWT file: /atium/Data/Nanopore/cpowgs/170816_BUCC/bcc_refs/bpyrrocinia.1.bt2
Wrote 1990344 bytes to secondary EBWT file: /atium/Data/Nanopore/cpowgs/170816_BUCC/bcc_refs/bpyrrocinia.2.bt2
Re-opening _in1 and _in2 as input streams
Returning from Ebwt constructor
Headers:
    len: 7961346
    bwtLen: 7961347
    sz: 1990337
    bwtSz: 1990337
    lineRate: 6
    offRate: 4
    offMask: 0xfffffff0
    ftabChars: 10
    eftabLen: 20
    eftabSz: 80
    ftabLen: 1048577
    ftabSz: 4194308
    offsLen: 497585
    offsSz: 1990340
    lineSz: 64
    sideSz: 64
    sideBwtSz: 48
    sideBwtLen: 192
    numSides: 41466
    numLines: 41466
    ebwtTotLen: 2653824
    ebwtTotSz: 2653824
    color: 0
    reverse: 0
Total time for call to driver() for forward index: 00:00:06
Reading reference sizes
  Time reading reference sizes: 00:00:00
Calculating joined length
Writing header
Reserving space for joined string
Joining reference sequences
  Time to join reference sequences: 00:00:00
  Time to reverse reference sequence: 00:00:00
bmax according to bmaxDivN setting: 1990336
Using parameters --bmax 1492752 --dcv 1024
  Doing ahead-of-time memory usage test
  Passed!  Constructing with these parameters: --bmax 1492752 --dcv 1024
Constructing suffix-array element generator
Building DifferenceCoverSample
  Building sPrime
  Building sPrimeOrder
  V-Sorting samples
  V-Sorting samples time: 00:00:00
  Allocating rank array
  Ranking v-sort output
  Ranking v-sort output time: 00:00:00
  Invoking Larsson-Sadakane on ranks
  Invoking Larsson-Sadakane on ranks time: 00:00:00
  Sanity-checking and returning
Building samples
Reserving space for 12 sample suffixes
Generating random suffixes
QSorting 12 sample offsets, eliminating duplicates
QSorting sample offsets, eliminating duplicates time: 00:00:00
Multikey QSorting 12 samples
  (Using difference cover)
  Multikey QSorting samples time: 00:00:00
Calculating bucket sizes
  Binary sorting into buckets
  10%
  20%
  30%
  40%
  50%
  60%
  70%
  80%
  90%
  100%
  Binary sorting into buckets time: 00:00:01
Splitting and merging
  Splitting and merging time: 00:00:00
Avg bucket size: 1.13733e+06 (target: 1492751)
Converting suffix-array elements to index image
Allocating ftab, absorbFtab
Entering Ebwt loop
Getting block 1 of 7
  Reserving size (1492752) for bucket
  Calculating Z arrays
  Calculating Z arrays time: 00:00:00
  Entering block accumulator loop:
  10%
  20%
  30%
  40%
  50%
  60%
  70%
  80%
  90%
  100%
  Block accumulator loop time: 00:00:00
  Sorting block of length 1384377
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 1384378
Getting block 2 of 7
  Reserving size (1492752) for bucket
  Calculating Z arrays
  Calculating Z arrays time: 00:00:00
  Entering block accumulator loop:
  10%
  20%
  30%
  40%
  50%
  60%
  70%
  80%
  90%
  100%
  Block accumulator loop time: 00:00:00
  Sorting block of length 1393094
  (Using difference cover)
  Sorting block time: 00:00:01
Returning block of 1393095
Getting block 3 of 7
  Reserving size (1492752) for bucket
  Calculating Z arrays
  Calculating Z arrays time: 00:00:00
  Entering block accumulator loop:
  10%
  20%
  30%
  40%
  50%
  60%
  70%
  80%
  90%
  100%
  Block accumulator loop time: 00:00:00
  Sorting block of length 339440
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 339441
Getting block 4 of 7
  Reserving size (1492752) for bucket
  Calculating Z arrays
  Calculating Z arrays time: 00:00:00
  Entering block accumulator loop:
  10%
  20%
  30%
  40%
  50%
  60%
  70%
  80%
  90%
  100%
  Block accumulator loop time: 00:00:00
  Sorting block of length 1490563
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 1490564
Getting block 5 of 7
  Reserving size (1492752) for bucket
  Calculating Z arrays
  Calculating Z arrays time: 00:00:00
  Entering block accumulator loop:
  10%
  20%
  30%
  40%
  50%
  60%
  70%
  80%
  90%
  100%
  Block accumulator loop time: 00:00:01
  Sorting block of length 804253
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 804254
Getting block 6 of 7
  Reserving size (1492752) for bucket
  Calculating Z arrays
  Calculating Z arrays time: 00:00:00
  Entering block accumulator loop:
  10%
  20%
  30%
  40%
  50%
  60%
  70%
  80%
  90%
  100%
  Block accumulator loop time: 00:00:00
  Sorting block of length 1168349
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 1168350
Getting block 7 of 7
  Reserving size (1492752) for bucket
  Calculating Z arrays
  Calculating Z arrays time: 00:00:00
  Entering block accumulator loop:
  10%
  20%
  30%
  40%
  50%
  60%
  70%
  80%
  90%
  100%
  Block accumulator loop time: 00:00:00
  Sorting block of length 1381264
  (Using difference cover)
  Sorting block time: 00:00:01
Returning block of 1381265
Exited Ebwt loop
fchr[A]: 0
fchr[C]: 1333887
fchr[G]: 3973627
fchr[T]: 6624905
fchr[$]: 7961346
Exiting Ebwt::buildToDisk()
Returning from initFromVector
Wrote 6848686 bytes to primary EBWT file: /atium/Data/Nanopore/cpowgs/170816_BUCC/bcc_refs/bpyrrocinia.rev.1.bt2
Wrote 1990344 bytes to secondary EBWT file: /atium/Data/Nanopore/cpowgs/170816_BUCC/bcc_refs/bpyrrocinia.rev.2.bt2
Re-opening _in1 and _in2 as input streams
Returning from Ebwt constructor
Headers:
    len: 7961346
    bwtLen: 7961347
    sz: 1990337
    bwtSz: 1990337
    lineRate: 6
    offRate: 4
    offMask: 0xfffffff0
    ftabChars: 10
    eftabLen: 20
    eftabSz: 80
    ftabLen: 1048577
    ftabSz: 4194308
    offsLen: 497585
    offsSz: 1990340
    lineSz: 64
    sideSz: 64
    sideBwtSz: 48
    sideBwtLen: 192
    numSides: 41466
    numLines: 41466
    ebwtTotLen: 2653824
    ebwtTotSz: 2653824
    color: 0
    reverse: 1
Total time for backward call to driver() for mirror index: 00:00:04
Settings:
  Output files: "/atium/Data/Nanopore/cpowgs/170816_BUCC/bcc_refs/bseminalis.*.bt2"
  Line rate: 6 (line is 64 bytes)
  Lines per side: 1 (side is 64 bytes)
  Offset rate: 4 (one in 16)
  FTable chars: 10
  Strings: unpacked
  Max bucket size: default
  Max bucket size, sqrt multiplier: default
  Max bucket size, len divisor: 4
  Difference-cover sample period: 1024
  Endianness: little
  Actual local endianness: little
  Sanity checking: disabled
  Assertions: disabled
  Random seed: 0
  Sizeofs: void*:8, int:4, long:8, size_t:8
Input files DNA, FASTA:
  /atium/Data/Nanopore/cpowgs/170816_BUCC/bcc_refs/bseminalis.fa
Reading reference sizes
  Time reading reference sizes: 00:00:00
Calculating joined length
Writing header
Reserving space for joined string
Joining reference sequences
  Time to join reference sequences: 00:00:00
bmax according to bmaxDivN setting: 1912236
Using parameters --bmax 1434177 --dcv 1024
  Doing ahead-of-time memory usage test
  Passed!  Constructing with these parameters: --bmax 1434177 --dcv 1024
Constructing suffix-array element generator
Building DifferenceCoverSample
  Building sPrime
  Building sPrimeOrder
  V-Sorting samples
  V-Sorting samples time: 00:00:00
  Allocating rank array
  Ranking v-sort output
  Ranking v-sort output time: 00:00:00
  Invoking Larsson-Sadakane on ranks
  Invoking Larsson-Sadakane on ranks time: 00:00:00
  Sanity-checking and returning
Building samples
Reserving space for 12 sample suffixes
Generating random suffixes
QSorting 12 sample offsets, eliminating duplicates
QSorting sample offsets, eliminating duplicates time: 00:00:00
Multikey QSorting 12 samples
  (Using difference cover)
  Multikey QSorting samples time: 00:00:00
Calculating bucket sizes
  Binary sorting into buckets
  10%
  20%
  30%
  40%
  50%
  60%
  70%
  80%
  90%
  100%
  Binary sorting into buckets time: 00:00:01
Splitting and merging
  Splitting and merging time: 00:00:00
Split 2, merged 7; iterating...
  Binary sorting into buckets
  10%
  20%
  30%
  40%
  50%
  60%
  70%
  80%
  90%
  100%
  Binary sorting into buckets time: 00:00:00
Splitting and merging
  Splitting and merging time: 00:00:00
Split 2, merged 1; iterating...
  Binary sorting into buckets
  10%
  20%
  30%
  40%
  50%
  60%
  70%
  80%
  90%
  100%
  Binary sorting into buckets time: 00:00:01
Splitting and merging
  Splitting and merging time: 00:00:00
Split 1, merged 1; iterating...
  Binary sorting into buckets
  10%
  20%
  30%
  40%
  50%
  60%
  70%
  80%
  90%
  100%
  Binary sorting into buckets time: 00:00:00
Splitting and merging
  Splitting and merging time: 00:00:00
Avg bucket size: 956117 (target: 1434176)
Converting suffix-array elements to index image
Allocating ftab, absorbFtab
Entering Ebwt loop
Getting block 1 of 8
  Reserving size (1434177) for bucket
  Calculating Z arrays
  Calculating Z arrays time: 00:00:00
  Entering block accumulator loop:
  10%
  20%
  30%
  40%
  50%
  60%
  70%
  80%
  90%
  100%
  Block accumulator loop time: 00:00:00
  Sorting block of length 577433
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 577434
Getting block 2 of 8
  Reserving size (1434177) for bucket
  Calculating Z arrays
  Calculating Z arrays time: 00:00:00
  Entering block accumulator loop:
  10%
  20%
  30%
  40%
  50%
  60%
  70%
  80%
  90%
  100%
  Block accumulator loop time: 00:00:00
  Sorting block of length 1372883
  (Using difference cover)
  Sorting block time: 00:00:01
Returning block of 1372884
Getting block 3 of 8
  Reserving size (1434177) for bucket
  Calculating Z arrays
  Calculating Z arrays time: 00:00:00
  Entering block accumulator loop:
  10%
  20%
  30%
  40%
  50%
  60%
  70%
  80%
  90%
  100%
  Block accumulator loop time: 00:00:00
  Sorting block of length 1416459
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 1416460
Getting block 4 of 8
  Reserving size (1434177) for bucket
  Calculating Z arrays
  Calculating Z arrays time: 00:00:00
  Entering block accumulator loop:
  10%
  20%
  30%
  40%
  50%
  60%
  70%
  80%
  90%
  100%
  Block accumulator loop time: 00:00:00
  Sorting block of length 1085973
  (Using difference cover)
  Sorting block time: 00:00:01
Returning block of 1085974
Getting block 5 of 8
  Reserving size (1434177) for bucket
  Calculating Z arrays
  Calculating Z arrays time: 00:00:00
  Entering block accumulator loop:
  10%
  20%
  30%
  40%
  50%
  60%
  70%
  80%
  90%
  100%
  Block accumulator loop time: 00:00:00
  Sorting block of length 439586
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 439587
Getting block 6 of 8
  Reserving size (1434177) for bucket
  Calculating Z arrays
  Calculating Z arrays time: 00:00:00
  Entering block accumulator loop:
  10%
  20%
  30%
  40%
  50%
  60%
  70%
  80%
  90%
  100%
  Block accumulator loop time: 00:00:00
  Sorting block of length 1215284
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 1215285
Getting block 7 of 8
  Reserving size (1434177) for bucket
  Calculating Z arrays
  Calculating Z arrays time: 00:00:00
  Entering block accumulator loop:
  10%
  20%
  30%
  40%
  50%
  60%
  70%
  80%
  90%
  100%
  Block accumulator loop time: 00:00:01
  Sorting block of length 343284
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 343285
Getting block 8 of 8
  Reserving size (1434177) for bucket
  Calculating Z arrays
  Calculating Z arrays time: 00:00:00
  Entering block accumulator loop:
  10%
  20%
  30%
  40%
  50%
  60%
  70%
  80%
  90%
  100%
  Block accumulator loop time: 00:00:00
  Sorting block of length 1198035
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 1198036
Exited Ebwt loop
fchr[A]: 0
fchr[C]: 1252555
fchr[G]: 3825375
fchr[T]: 6400127
fchr[$]: 7648944
Exiting Ebwt::buildToDisk()
Returning from initFromVector
Wrote 6744469 bytes to primary EBWT file: /atium/Data/Nanopore/cpowgs/170816_BUCC/bcc_refs/bseminalis.1.bt2
Wrote 1912244 bytes to secondary EBWT file: /atium/Data/Nanopore/cpowgs/170816_BUCC/bcc_refs/bseminalis.2.bt2
Re-opening _in1 and _in2 as input streams
Returning from Ebwt constructor
Headers:
    len: 7648944
    bwtLen: 7648945
    sz: 1912236
    bwtSz: 1912237
    lineRate: 6
    offRate: 4
    offMask: 0xfffffff0
    ftabChars: 10
    eftabLen: 20
    eftabSz: 80
    ftabLen: 1048577
    ftabSz: 4194308
    offsLen: 478060
    offsSz: 1912240
    lineSz: 64
    sideSz: 64
    sideBwtSz: 48
    sideBwtLen: 192
    numSides: 39839
    numLines: 39839
    ebwtTotLen: 2549696
    ebwtTotSz: 2549696
    color: 0
    reverse: 0
Total time for call to driver() for forward index: 00:00:05
Reading reference sizes
  Time reading reference sizes: 00:00:00
Calculating joined length
Writing header
Reserving space for joined string
Joining reference sequences
  Time to join reference sequences: 00:00:00
  Time to reverse reference sequence: 00:00:00
bmax according to bmaxDivN setting: 1912236
Using parameters --bmax 1434177 --dcv 1024
  Doing ahead-of-time memory usage test
  Passed!  Constructing with these parameters: --bmax 1434177 --dcv 1024
Constructing suffix-array element generator
Building DifferenceCoverSample
  Building sPrime
  Building sPrimeOrder
  V-Sorting samples
  V-Sorting samples time: 00:00:00
  Allocating rank array
  Ranking v-sort output
  Ranking v-sort output time: 00:00:00
  Invoking Larsson-Sadakane on ranks
  Invoking Larsson-Sadakane on ranks time: 00:00:00
  Sanity-checking and returning
Building samples
Reserving space for 12 sample suffixes
Generating random suffixes
QSorting 12 sample offsets, eliminating duplicates
QSorting sample offsets, eliminating duplicates time: 00:00:00
Multikey QSorting 12 samples
  (Using difference cover)
  Multikey QSorting samples time: 00:00:00
Calculating bucket sizes
  Binary sorting into buckets
  10%
  20%
  30%
  40%
  50%
  60%
  70%
  80%
  90%
  100%
  Binary sorting into buckets time: 00:00:00
Splitting and merging
  Splitting and merging time: 00:00:00
Split 1, merged 7; iterating...
  Binary sorting into buckets
  10%
  20%
  30%
  40%
  50%
  60%
  70%
  80%
  90%
  100%
  Binary sorting into buckets time: 00:00:01
Splitting and merging
  Splitting and merging time: 00:00:00
Split 1, merged 1; iterating...
  Binary sorting into buckets
  10%
  20%
  30%
  40%
  50%
  60%
  70%
  80%
  90%
  100%
  Binary sorting into buckets time: 00:00:00
Splitting and merging
  Splitting and merging time: 00:00:00
Split 1, merged 1; iterating...
  Binary sorting into buckets
  10%
  20%
  30%
  40%
  50%
  60%
  70%
  80%
  90%
  100%
  Binary sorting into buckets time: 00:00:00
Splitting and merging
  Splitting and merging time: 00:00:00
Split 1, merged 1; iterating...
  Binary sorting into buckets
  10%
  20%
  30%
  40%
  50%
  60%
  70%
  80%
  90%
  100%
  Binary sorting into buckets time: 00:00:01
Splitting and merging
  Splitting and merging time: 00:00:00
Avg bucket size: 1.09271e+06 (target: 1434176)
Converting suffix-array elements to index image
Allocating ftab, absorbFtab
Entering Ebwt loop
Getting block 1 of 7
  Reserving size (1434177) for bucket
  Calculating Z arrays
  Calculating Z arrays time: 00:00:00
  Entering block accumulator loop:
  10%
  20%
  30%
  40%
  50%
  60%
  70%
  80%
  90%
  100%
  Block accumulator loop time: 00:00:00
  Sorting block of length 1329055
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 1329056
Getting block 2 of 7
  Reserving size (1434177) for bucket
  Calculating Z arrays
  Calculating Z arrays time: 00:00:00
  Entering block accumulator loop:
  10%
  20%
  30%
  40%
  50%
  60%
  70%
  80%
  90%
  100%
  Block accumulator loop time: 00:00:00
  Sorting block of length 983763
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 983764
Getting block 3 of 7
  Reserving size (1434177) for bucket
  Calculating Z arrays
  Calculating Z arrays time: 00:00:00
  Entering block accumulator loop:
  10%
  20%
  30%
  40%
  50%
  60%
  70%
  80%
  90%
  100%
  Block accumulator loop time: 00:00:00
  Sorting block of length 840908
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 840909
Getting block 4 of 7
  Reserving size (1434177) for bucket
  Calculating Z arrays
  Calculating Z arrays time: 00:00:00
  Entering block accumulator loop:
  10%
  20%
  30%
  40%
  50%
  60%
  70%
  80%
  90%
  100%
  Block accumulator loop time: 00:00:00
  Sorting block of length 671645
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 671646
Getting block 5 of 7
  Reserving size (1434177) for bucket
  Calculating Z arrays
  Calculating Z arrays time: 00:00:00
  Entering block accumulator loop:
  10%
  20%
  30%
  40%
  50%
  60%
  70%
  80%
  90%
  100%
  Block accumulator loop time: 00:00:00
  Sorting block of length 1392049
  (Using difference cover)
  Sorting block time: 00:00:01
Returning block of 1392050
Getting block 6 of 7
  Reserving size (1434177) for bucket
  Calculating Z arrays
  Calculating Z arrays time: 00:00:00
  Entering block accumulator loop:
  10%
  20%
  30%
  40%
  50%
  60%
  70%
  80%
  90%
  100%
  Block accumulator loop time: 00:00:00
  Sorting block of length 1125604
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 1125605
Getting block 7 of 7
  Reserving size (1434177) for bucket
  Calculating Z arrays
  Calculating Z arrays time: 00:00:00
  Entering block accumulator loop:
  10%
  20%
  30%
  40%
  50%
  60%
  70%
  80%
  90%
  100%
  Block accumulator loop time: 00:00:00
  Sorting block of length 1305914
  (Using difference cover)
  Sorting block time: 00:00:01
Returning block of 1305915
Exited Ebwt loop
fchr[A]: 0
fchr[C]: 1252555
fchr[G]: 3825375
fchr[T]: 6400127
fchr[$]: 7648944
Exiting Ebwt::buildToDisk()
Returning from initFromVector
Wrote 6744469 bytes to primary EBWT file: /atium/Data/Nanopore/cpowgs/170816_BUCC/bcc_refs/bseminalis.rev.1.bt2
Wrote 1912244 bytes to secondary EBWT file: /atium/Data/Nanopore/cpowgs/170816_BUCC/bcc_refs/bseminalis.rev.2.bt2
Re-opening _in1 and _in2 as input streams
Returning from Ebwt constructor
Headers:
    len: 7648944
    bwtLen: 7648945
    sz: 1912236
    bwtSz: 1912237
    lineRate: 6
    offRate: 4
    offMask: 0xfffffff0
    ftabChars: 10
    eftabLen: 20
    eftabSz: 80
    ftabLen: 1048577
    ftabSz: 4194308
    offsLen: 478060
    offsSz: 1912240
    lineSz: 64
    sideSz: 64
    sideBwtSz: 48
    sideBwtLen: 192
    numSides: 39839
    numLines: 39839
    ebwtTotLen: 2549696
    ebwtTotSz: 2549696
    color: 0
    reverse: 1
Total time for backward call to driver() for mirror index: 00:00:06
Settings:
  Output files: "/atium/Data/Nanopore/cpowgs/170816_BUCC/bcc_refs/bstabilis.*.bt2"
  Line rate: 6 (line is 64 bytes)
  Lines per side: 1 (side is 64 bytes)
  Offset rate: 4 (one in 16)
  FTable chars: 10
  Strings: unpacked
  Max bucket size: default
  Max bucket size, sqrt multiplier: default
  Max bucket size, len divisor: 4
  Difference-cover sample period: 1024
  Endianness: little
  Actual local endianness: little
  Sanity checking: disabled
  Assertions: disabled
  Random seed: 0
  Sizeofs: void*:8, int:4, long:8, size_t:8
Input files DNA, FASTA:
  /atium/Data/Nanopore/cpowgs/170816_BUCC/bcc_refs/bstabilis.fa
Reading reference sizes
  Time reading reference sizes: 00:00:00
Calculating joined length
Writing header
Reserving space for joined string
Joining reference sequences
  Time to join reference sequences: 00:00:01
bmax according to bmaxDivN setting: 2131986
Using parameters --bmax 1598990 --dcv 1024
  Doing ahead-of-time memory usage test
  Passed!  Constructing with these parameters: --bmax 1598990 --dcv 1024
Constructing suffix-array element generator
Building DifferenceCoverSample
  Building sPrime
  Building sPrimeOrder
  V-Sorting samples
  V-Sorting samples time: 00:00:00
  Allocating rank array
  Ranking v-sort output
  Ranking v-sort output time: 00:00:00
  Invoking Larsson-Sadakane on ranks
  Invoking Larsson-Sadakane on ranks time: 00:00:00
  Sanity-checking and returning
Building samples
Reserving space for 12 sample suffixes
Generating random suffixes
QSorting 12 sample offsets, eliminating duplicates
QSorting sample offsets, eliminating duplicates time: 00:00:00
Multikey QSorting 12 samples
  (Using difference cover)
  Multikey QSorting samples time: 00:00:00
Calculating bucket sizes
  Binary sorting into buckets
  10%
  20%
  30%
  40%
  50%
  60%
  70%
  80%
  90%
  100%
  Binary sorting into buckets time: 00:00:00
Splitting and merging
  Splitting and merging time: 00:00:00
Split 2, merged 6; iterating...
  Binary sorting into buckets
  10%
  20%
  30%
  40%
  50%
  60%
  70%
  80%
  90%
  100%
  Binary sorting into buckets time: 00:00:01
Splitting and merging
  Splitting and merging time: 00:00:00
Avg bucket size: 947549 (target: 1598989)
Converting suffix-array elements to index image
Allocating ftab, absorbFtab
Entering Ebwt loop
Getting block 1 of 9
  Reserving size (1598990) for bucket
  Calculating Z arrays
  Calculating Z arrays time: 00:00:00
  Entering block accumulator loop:
  10%
  20%
  30%
  40%
  50%
  60%
  70%
  80%
  90%
  100%
  Block accumulator loop time: 00:00:00
  Sorting block of length 927815
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 927816
Getting block 2 of 9
  Reserving size (1598990) for bucket
  Calculating Z arrays
  Calculating Z arrays time: 00:00:00
  Entering block accumulator loop:
  10%
  20%
  30%
  40%
  50%
  60%
  70%
  80%
  90%
  100%
  Block accumulator loop time: 00:00:00
  Sorting block of length 969688
  (Using difference cover)
  Sorting block time: 00:00:01
Returning block of 969689
Getting block 3 of 9
  Reserving size (1598990) for bucket
  Calculating Z arrays
  Calculating Z arrays time: 00:00:00
  Entering block accumulator loop:
  10%
  20%
  30%
  40%
  50%
  60%
  70%
  80%
  90%
  100%
  Block accumulator loop time: 00:00:00
  Sorting block of length 920180
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 920181
Getting block 4 of 9
  Reserving size (1598990) for bucket
  Calculating Z arrays
  Calculating Z arrays time: 00:00:00
  Entering block accumulator loop:
  10%
  20%
  30%
  40%
  50%
  60%
  70%
  80%
  90%
  100%
  Block accumulator loop time: 00:00:00
  Sorting block of length 867384
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 867385
Getting block 5 of 9
  Reserving size (1598990) for bucket
  Calculating Z arrays
  Calculating Z arrays time: 00:00:00
  Entering block accumulator loop:
  10%
  20%
  30%
  40%
  50%
  60%
  70%
  80%
  90%
  100%
  Block accumulator loop time: 00:00:00
  Sorting block of length 766399
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 766400
Getting block 6 of 9
  Reserving size (1598990) for bucket
  Calculating Z arrays
  Calculating Z arrays time: 00:00:00
  Entering block accumulator loop:
  10%
  20%
  30%
  40%
  50%
  60%
  70%
  80%
  90%
  100%
  Block accumulator loop time: 00:00:00
  Sorting block of length 987228
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 987229
Getting block 7 of 9
  Reserving size (1598990) for bucket
  Calculating Z arrays
  Calculating Z arrays time: 00:00:00
  Entering block accumulator loop:
  10%
  20%
  30%
  40%
  50%
  60%
  70%
  80%
  90%
  100%
  Block accumulator loop time: 00:00:01
  Sorting block of length 1273686
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 1273687
Getting block 8 of 9
  Reserving size (1598990) for bucket
  Calculating Z arrays
  Calculating Z arrays time: 00:00:00
  Entering block accumulator loop:
  10%
  20%
  30%
  40%
  50%
  60%
  70%
  80%
  90%
  100%
  Block accumulator loop time: 00:00:00
  Sorting block of length 865097
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 865098
Getting block 9 of 9
  Reserving size (1598990) for bucket
  Calculating Z arrays
  Calculating Z arrays time: 00:00:00
  Entering block accumulator loop:
  10%
  20%
  30%
  40%
  50%
  60%
  70%
  80%
  90%
  100%
  Block accumulator loop time: 00:00:01
  Sorting block of length 950462
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 950463
Exited Ebwt loop
fchr[A]: 0
fchr[C]: 1429708
fchr[G]: 4252305
fchr[T]: 7094172
fchr[$]: 8527947
Exiting Ebwt::buildToDisk()
Returning from initFromVector
Wrote 7037446 bytes to primary EBWT file: /atium/Data/Nanopore/cpowgs/170816_BUCC/bcc_refs/bstabilis.1.bt2
Wrote 2131992 bytes to secondary EBWT file: /atium/Data/Nanopore/cpowgs/170816_BUCC/bcc_refs/bstabilis.2.bt2
Re-opening _in1 and _in2 as input streams
Returning from Ebwt constructor
Headers:
    len: 8527947
    bwtLen: 8527948
    sz: 2131987
    bwtSz: 2131987
    lineRate: 6
    offRate: 4
    offMask: 0xfffffff0
    ftabChars: 10
    eftabLen: 20
    eftabSz: 80
    ftabLen: 1048577
    ftabSz: 4194308
    offsLen: 532997
    offsSz: 2131988
    lineSz: 64
    sideSz: 64
    sideBwtSz: 48
    sideBwtLen: 192
    numSides: 44417
    numLines: 44417
    ebwtTotLen: 2842688
    ebwtTotSz: 2842688
    color: 0
    reverse: 0
Total time for call to driver() for forward index: 00:00:06
Reading reference sizes
  Time reading reference sizes: 00:00:00
Calculating joined length
Writing header
Reserving space for joined string
Joining reference sequences
  Time to join reference sequences: 00:00:00
  Time to reverse reference sequence: 00:00:00
bmax according to bmaxDivN setting: 2131986
Using parameters --bmax 1598990 --dcv 1024
  Doing ahead-of-time memory usage test
  Passed!  Constructing with these parameters: --bmax 1598990 --dcv 1024
Constructing suffix-array element generator
Building DifferenceCoverSample
  Building sPrime
  Building sPrimeOrder
  V-Sorting samples
  V-Sorting samples time: 00:00:00
  Allocating rank array
  Ranking v-sort output
  Ranking v-sort output time: 00:00:00
  Invoking Larsson-Sadakane on ranks
  Invoking Larsson-Sadakane on ranks time: 00:00:00
  Sanity-checking and returning
Building samples
Reserving space for 12 sample suffixes
Generating random suffixes
QSorting 12 sample offsets, eliminating duplicates
QSorting sample offsets, eliminating duplicates time: 00:00:00
Multikey QSorting 12 samples
  (Using difference cover)
  Multikey QSorting samples time: 00:00:00
Calculating bucket sizes
  Binary sorting into buckets
  10%
  20%
  30%
  40%
  50%
  60%
  70%
  80%
  90%
  100%
  Binary sorting into buckets time: 00:00:01
Splitting and merging
  Splitting and merging time: 00:00:00
Split 2, merged 6; iterating...
  Binary sorting into buckets
  10%
  20%
  30%
  40%
  50%
  60%
  70%
  80%
  90%
  100%
  Binary sorting into buckets time: 00:00:00
Splitting and merging
  Splitting and merging time: 00:00:00
Avg bucket size: 1.06599e+06 (target: 1598989)
Converting suffix-array elements to index image
Allocating ftab, absorbFtab
Entering Ebwt loop
Getting block 1 of 8
  Reserving size (1598990) for bucket
  Calculating Z arrays
  Calculating Z arrays time: 00:00:00
  Entering block accumulator loop:
  10%
  20%
  30%
  40%
  50%
  60%
  70%
  80%
  90%
  100%
  Block accumulator loop time: 00:00:01
  Sorting block of length 1108591
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 1108592
Getting block 2 of 8
  Reserving size (1598990) for bucket
  Calculating Z arrays
  Calculating Z arrays time: 00:00:00
  Entering block accumulator loop:
  10%
  20%
  30%
  40%
  50%
  60%
  70%
  80%
  90%
  100%
  Block accumulator loop time: 00:00:00
  Sorting block of length 1154570
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 1154571
Getting block 3 of 8
  Reserving size (1598990) for bucket
  Calculating Z arrays
  Calculating Z arrays time: 00:00:00
  Entering block accumulator loop:
  10%
  20%
  30%
  40%
  50%
  60%
  70%
  80%
  90%
  100%
  Block accumulator loop time: 00:00:01
  Sorting block of length 1095026
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 1095027
Getting block 4 of 8
  Reserving size (1598990) for bucket
  Calculating Z arrays
  Calculating Z arrays time: 00:00:00
  Entering block accumulator loop:
  10%
  20%
  30%
  40%
  50%
  60%
  70%
  80%
  90%
  100%
  Block accumulator loop time: 00:00:00
  Sorting block of length 547744
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 547745
Getting block 5 of 8
  Reserving size (1598990) for bucket
  Calculating Z arrays
  Calculating Z arrays time: 00:00:00
  Entering block accumulator loop:
  10%
  20%
  30%
  40%
  50%
  60%
  70%
  80%
  90%
  100%
  Block accumulator loop time: 00:00:00
  Sorting block of length 1155557
  (Using difference cover)
  Sorting block time: 00:00:01
Returning block of 1155558
Getting block 6 of 8
  Reserving size (1598990) for bucket
  Calculating Z arrays
  Calculating Z arrays time: 00:00:00
  Entering block accumulator loop:
  10%
  20%
  30%
  40%
  50%
  60%
  70%
  80%
  90%
  100%
  Block accumulator loop time: 00:00:00
  Sorting block of length 1150987
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 1150988
Getting block 7 of 8
  Reserving size (1598990) for bucket
  Calculating Z arrays
  Calculating Z arrays time: 00:00:00
  Entering block accumulator loop:
  10%
  20%
  30%
  40%
  50%
  60%
  70%
  80%
  90%
  100%
  Block accumulator loop time: 00:00:00
  Sorting block of length 899355
  (Using difference cover)
  Sorting block time: 00:00:01
Returning block of 899356
Getting block 8 of 8
  Reserving size (1598990) for bucket
  Calculating Z arrays
  Calculating Z arrays time: 00:00:00
  Entering block accumulator loop:
  10%
  20%
  30%
  40%
  50%
  60%
  70%
  80%
  90%
  100%
  Block accumulator loop time: 00:00:00
  Sorting block of length 1416110
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 1416111
Exited Ebwt loop
fchr[A]: 0
fchr[C]: 1429708
fchr[G]: 4252305
fchr[T]: 7094172
fchr[$]: 8527947
Exiting Ebwt::buildToDisk()
Returning from initFromVector
Wrote 7037446 bytes to primary EBWT file: /atium/Data/Nanopore/cpowgs/170816_BUCC/bcc_refs/bstabilis.rev.1.bt2
Wrote 2131992 bytes to secondary EBWT file: /atium/Data/Nanopore/cpowgs/170816_BUCC/bcc_refs/bstabilis.rev.2.bt2
Re-opening _in1 and _in2 as input streams
Returning from Ebwt constructor
Headers:
    len: 8527947
    bwtLen: 8527948
    sz: 2131987
    bwtSz: 2131987
    lineRate: 6
    offRate: 4
    offMask: 0xfffffff0
    ftabChars: 10
    eftabLen: 20
    eftabSz: 80
    ftabLen: 1048577
    ftabSz: 4194308
    offsLen: 532997
    offsSz: 2131988
    lineSz: 64
    sideSz: 64
    sideBwtSz: 48
    sideBwtLen: 192
    numSides: 44417
    numLines: 44417
    ebwtTotLen: 2842688
    ebwtTotSz: 2842688
    color: 0
    reverse: 1
Total time for backward call to driver() for mirror index: 00:00:05
Settings:
  Output files: "/atium/Data/Nanopore/cpowgs/170816_BUCC/bcc_refs/bubonensis.*.bt2"
  Line rate: 6 (line is 64 bytes)
  Lines per side: 1 (side is 64 bytes)
  Offset rate: 4 (one in 16)
  FTable chars: 10
  Strings: unpacked
  Max bucket size: default
  Max bucket size, sqrt multiplier: default
  Max bucket size, len divisor: 4
  Difference-cover sample period: 1024
  Endianness: little
  Actual local endianness: little
  Sanity checking: disabled
  Assertions: disabled
  Random seed: 0
  Sizeofs: void*:8, int:4, long:8, size_t:8
Input files DNA, FASTA:
  /atium/Data/Nanopore/cpowgs/170816_BUCC/bcc_refs/bubonensis.fa
Reading reference sizes
  Time reading reference sizes: 00:00:00
Calculating joined length
Writing header
Reserving space for joined string
Joining reference sequences
  Time to join reference sequences: 00:00:00
bmax according to bmaxDivN setting: 1797267
Using parameters --bmax 1347951 --dcv 1024
  Doing ahead-of-time memory usage test
  Passed!  Constructing with these parameters: --bmax 1347951 --dcv 1024
Constructing suffix-array element generator
Building DifferenceCoverSample
  Building sPrime
  Building sPrimeOrder
  V-Sorting samples
  V-Sorting samples time: 00:00:00
  Allocating rank array
  Ranking v-sort output
  Ranking v-sort output time: 00:00:00
  Invoking Larsson-Sadakane on ranks
  Invoking Larsson-Sadakane on ranks time: 00:00:00
  Sanity-checking and returning
Building samples
Reserving space for 12 sample suffixes
Generating random suffixes
QSorting 12 sample offsets, eliminating duplicates
QSorting sample offsets, eliminating duplicates time: 00:00:00
Multikey QSorting 12 samples
  (Using difference cover)
  Multikey QSorting samples time: 00:00:00
Calculating bucket sizes
  Binary sorting into buckets
  10%
  20%
  30%
  40%
  50%
  60%
  70%
  80%
  90%
  100%
  Binary sorting into buckets time: 00:00:01
Splitting and merging
  Splitting and merging time: 00:00:00
Avg bucket size: 1.02701e+06 (target: 1347950)
Converting suffix-array elements to index image
Allocating ftab, absorbFtab
Entering Ebwt loop
Getting block 1 of 7
  Reserving size (1347951) for bucket
  Calculating Z arrays
  Calculating Z arrays time: 00:00:00
  Entering block accumulator loop:
  10%
  20%
  30%
  40%
  50%
  60%
  70%
  80%
  90%
  100%
  Block accumulator loop time: 00:00:00
  Sorting block of length 921125
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 921126
Getting block 2 of 7
  Reserving size (1347951) for bucket
  Calculating Z arrays
  Calculating Z arrays time: 00:00:00
  Entering block accumulator loop:
  10%
  20%
  30%
  40%
  50%
  60%
  70%
  80%
  90%
  100%
  Block accumulator loop time: 00:00:00
  Sorting block of length 1202548
  (Using difference cover)
  Sorting block time: 00:00:01
Returning block of 1202549
Getting block 3 of 7
  Reserving size (1347951) for bucket
  Calculating Z arrays
  Calculating Z arrays time: 00:00:00
  Entering block accumulator loop:
  10%
  20%
  30%
  40%
  50%
  60%
  70%
  80%
  90%
  100%
  Block accumulator loop time: 00:00:00
  Sorting block of length 1101950
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 1101951
Getting block 4 of 7
  Reserving size (1347951) for bucket
  Calculating Z arrays
  Calculating Z arrays time: 00:00:00
  Entering block accumulator loop:
  10%
  20%
  30%
  40%
  50%
  60%
  70%
  80%
  90%
  100%
  Block accumulator loop time: 00:00:00
  Sorting block of length 802571
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 802572
Getting block 5 of 7
  Reserving size (1347951) for bucket
  Calculating Z arrays
  Calculating Z arrays time: 00:00:00
  Entering block accumulator loop:
  10%
  20%
  30%
  40%
  50%
  60%
  70%
  80%
  90%
  100%
  Block accumulator loop time: 00:00:01
  Sorting block of length 844954
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 844955
Getting block 6 of 7
  Reserving size (1347951) for bucket
  Calculating Z arrays
  Calculating Z arrays time: 00:00:00
  Entering block accumulator loop:
  10%
  20%
  30%
  40%
  50%
  60%
  70%
  80%
  90%
  100%
  Block accumulator loop time: 00:00:00
  Sorting block of length 1128319
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 1128320
Getting block 7 of 7
  Reserving size (1347951) for bucket
  Calculating Z arrays
  Calculating Z arrays time: 00:00:00
  Entering block accumulator loop:
  10%
  20%
  30%
  40%
  50%
  60%
  70%
  80%
  90%
  100%
  Block accumulator loop time: 00:00:00
  Sorting block of length 1187598
  (Using difference cover)
  Sorting block time: 00:00:01
Returning block of 1187599
Exited Ebwt loop
fchr[A]: 0
fchr[C]: 1173663
fchr[G]: 3596561
fchr[T]: 6012454
fchr[$]: 7189071
Exiting Ebwt::buildToDisk()
Returning from initFromVector
Wrote 6591144 bytes to primary EBWT file: /atium/Data/Nanopore/cpowgs/170816_BUCC/bcc_refs/bubonensis.1.bt2
Wrote 1797272 bytes to secondary EBWT file: /atium/Data/Nanopore/cpowgs/170816_BUCC/bcc_refs/bubonensis.2.bt2
Re-opening _in1 and _in2 as input streams
Returning from Ebwt constructor
Headers:
    len: 7189071
    bwtLen: 7189072
    sz: 1797268
    bwtSz: 1797268
    lineRate: 6
    offRate: 4
    offMask: 0xfffffff0
    ftabChars: 10
    eftabLen: 20
    eftabSz: 80
    ftabLen: 1048577
    ftabSz: 4194308
    offsLen: 449317
    offsSz: 1797268
    lineSz: 64
    sideSz: 64
    sideBwtSz: 48
    sideBwtLen: 192
    numSides: 37444
    numLines: 37444
    ebwtTotLen: 2396416
    ebwtTotSz: 2396416
    color: 0
    reverse: 0
Total time for call to driver() for forward index: 00:00:04
Reading reference sizes
  Time reading reference sizes: 00:00:00
Calculating joined length
Writing header
Reserving space for joined string
Joining reference sequences
  Time to join reference sequences: 00:00:00
  Time to reverse reference sequence: 00:00:00
bmax according to bmaxDivN setting: 1797267
Using parameters --bmax 1347951 --dcv 1024
  Doing ahead-of-time memory usage test
  Passed!  Constructing with these parameters: --bmax 1347951 --dcv 1024
Constructing suffix-array element generator
Building DifferenceCoverSample
  Building sPrime
  Building sPrimeOrder
  V-Sorting samples
  V-Sorting samples time: 00:00:00
  Allocating rank array
  Ranking v-sort output
  Ranking v-sort output time: 00:00:00
  Invoking Larsson-Sadakane on ranks
  Invoking Larsson-Sadakane on ranks time: 00:00:00
  Sanity-checking and returning
Building samples
Reserving space for 12 sample suffixes
Generating random suffixes
QSorting 12 sample offsets, eliminating duplicates
QSorting sample offsets, eliminating duplicates time: 00:00:00
Multikey QSorting 12 samples
  (Using difference cover)
  Multikey QSorting samples time: 00:00:00
Calculating bucket sizes
  Binary sorting into buckets
  10%
  20%
  30%
  40%
  50%
  60%
  70%
  80%
  90%
  100%
  Binary sorting into buckets time: 00:00:01
Splitting and merging
  Splitting and merging time: 00:00:00
Avg bucket size: 1.02701e+06 (target: 1347950)
Converting suffix-array elements to index image
Allocating ftab, absorbFtab
Entering Ebwt loop
Getting block 1 of 7
  Reserving size (1347951) for bucket
  Calculating Z arrays
  Calculating Z arrays time: 00:00:00
  Entering block accumulator loop:
  10%
  20%
  30%
  40%
  50%
  60%
  70%
  80%
  90%
  100%
  Block accumulator loop time: 00:00:00
  Sorting block of length 1273744
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 1273745
Getting block 2 of 7
  Reserving size (1347951) for bucket
  Calculating Z arrays
  Calculating Z arrays time: 00:00:00
  Entering block accumulator loop:
  10%
  20%
  30%
  40%
  50%
  60%
  70%
  80%
  90%
  100%
  Block accumulator loop time: 00:00:00
  Sorting block of length 1319316
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 1319317
Getting block 3 of 7
  Reserving size (1347951) for bucket
  Calculating Z arrays
  Calculating Z arrays time: 00:00:00
  Entering block accumulator loop:
  10%
  20%
  30%
  40%
  50%
  60%
  70%
  80%
  90%
  100%
  Block accumulator loop time: 00:00:00
  Sorting block of length 1001671
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 1001672
Getting block 4 of 7
  Reserving size (1347951) for bucket
  Calculating Z arrays
  Calculating Z arrays time: 00:00:00
  Entering block accumulator loop:
  10%
  20%
  30%
  40%
  50%
  60%
  70%
  80%
  90%
  100%
  Block accumulator loop time: 00:00:00
  Sorting block of length 1014574
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 1014575
Getting block 5 of 7
  Reserving size (1347951) for bucket
  Calculating Z arrays
  Calculating Z arrays time: 00:00:00
  Entering block accumulator loop:
  10%
  20%
  30%
  40%
  50%
  60%
  70%
  80%
  90%
  100%
  Block accumulator loop time: 00:00:01
  Sorting block of length 804789
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 804790
Getting block 6 of 7
  Reserving size (1347951) for bucket
  Calculating Z arrays
  Calculating Z arrays time: 00:00:00
  Entering block accumulator loop:
  10%
  20%
  30%
  40%
  50%
  60%
  70%
  80%
  90%
  100%
  Block accumulator loop time: 00:00:00
  Sorting block of length 1301386
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 1301387
Getting block 7 of 7
  Reserving size (1347951) for bucket
  Calculating Z arrays
  Calculating Z arrays time: 00:00:00
  Entering block accumulator loop:
  10%
  20%
  30%
  40%
  50%
  60%
  70%
  80%
  90%
  100%
  Block accumulator loop time: 00:00:00
  Sorting block of length 473585
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 473586
Exited Ebwt loop
fchr[A]: 0
fchr[C]: 1173663
fchr[G]: 3596561
fchr[T]: 6012454
fchr[$]: 7189071
Exiting Ebwt::buildToDisk()
Returning from initFromVector
Wrote 6591144 bytes to primary EBWT file: /atium/Data/Nanopore/cpowgs/170816_BUCC/bcc_refs/bubonensis.rev.1.bt2
Wrote 1797272 bytes to secondary EBWT file: /atium/Data/Nanopore/cpowgs/170816_BUCC/bcc_refs/bubonensis.rev.2.bt2
Re-opening _in1 and _in2 as input streams
Returning from Ebwt constructor
Headers:
    len: 7189071
    bwtLen: 7189072
    sz: 1797268
    bwtSz: 1797268
    lineRate: 6
    offRate: 4
    offMask: 0xfffffff0
    ftabChars: 10
    eftabLen: 20
    eftabSz: 80
    ftabLen: 1048577
    ftabSz: 4194308
    offsLen: 449317
    offsSz: 1797268
    lineSz: 64
    sideSz: 64
    sideBwtSz: 48
    sideBwtLen: 192
    numSides: 37444
    numLines: 37444
    ebwtTotLen: 2396416
    ebwtTotSz: 2396416
    color: 0
    reverse: 1
Total time for backward call to driver() for mirror index: 00:00:04
Settings:
  Output files: "/atium/Data/Nanopore/cpowgs/170816_BUCC/bcc_refs/bvietnamiensis.*.bt2"
  Line rate: 6 (line is 64 bytes)
  Lines per side: 1 (side is 64 bytes)
  Offset rate: 4 (one in 16)
  FTable chars: 10
  Strings: unpacked
  Max bucket size: default
  Max bucket size, sqrt multiplier: default
  Max bucket size, len divisor: 4
  Difference-cover sample period: 1024
  Endianness: little
  Actual local endianness: little
  Sanity checking: disabled
  Assertions: disabled
  Random seed: 0
  Sizeofs: void*:8, int:4, long:8, size_t:8
Input files DNA, FASTA:
  /atium/Data/Nanopore/cpowgs/170816_BUCC/bcc_refs/bvietnamiensis.fa
Reading reference sizes
  Time reading reference sizes: 00:00:01
Calculating joined length
Writing header
Reserving space for joined string
Joining reference sequences
  Time to join reference sequences: 00:00:00
bmax according to bmaxDivN setting: 1732624
Using parameters --bmax 1299468 --dcv 1024
  Doing ahead-of-time memory usage test
  Passed!  Constructing with these parameters: --bmax 1299468 --dcv 1024
Constructing suffix-array element generator
Building DifferenceCoverSample
  Building sPrime
  Building sPrimeOrder
  V-Sorting samples
  V-Sorting samples time: 00:00:00
  Allocating rank array
  Ranking v-sort output
  Ranking v-sort output time: 00:00:00
  Invoking Larsson-Sadakane on ranks
  Invoking Larsson-Sadakane on ranks time: 00:00:00
  Sanity-checking and returning
Building samples
Reserving space for 12 sample suffixes
Generating random suffixes
QSorting 12 sample offsets, eliminating duplicates
QSorting sample offsets, eliminating duplicates time: 00:00:00
Multikey QSorting 12 samples
  (Using difference cover)
  Multikey QSorting samples time: 00:00:00
Calculating bucket sizes
  Binary sorting into buckets
  10%
  20%
  30%
  40%
  50%
  60%
  70%
  80%
  90%
  100%
  Binary sorting into buckets time: 00:00:00
Splitting and merging
  Splitting and merging time: 00:00:00
Split 1, merged 5; iterating...
  Binary sorting into buckets
  10%
  20%
  30%
  40%
  50%
  60%
  70%
  80%
  90%
  100%
  Binary sorting into buckets time: 00:00:01
Splitting and merging
  Splitting and merging time: 00:00:00
Avg bucket size: 866311 (target: 1299467)
Converting suffix-array elements to index image
Allocating ftab, absorbFtab
Entering Ebwt loop
Getting block 1 of 8
  Reserving size (1299468) for bucket
  Calculating Z arrays
  Calculating Z arrays time: 00:00:00
  Entering block accumulator loop:
  10%
  20%
  30%
  40%
  50%
  60%
  70%
  80%
  90%
  100%
  Block accumulator loop time: 00:00:00
  Sorting block of length 484126
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 484127
Getting block 2 of 8
  Reserving size (1299468) for bucket
  Calculating Z arrays
  Calculating Z arrays time: 00:00:00
  Entering block accumulator loop:
  10%
  20%
  30%
  40%
  50%
  60%
  70%
  80%
  90%
  100%
  Block accumulator loop time: 00:00:00
  Sorting block of length 1072786
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 1072787
Getting block 3 of 8
  Reserving size (1299468) for bucket
  Calculating Z arrays
  Calculating Z arrays time: 00:00:00
  Entering block accumulator loop:
  10%
  20%
  30%
  40%
  50%
  60%
  70%
  80%
  90%
  100%
  Block accumulator loop time: 00:00:01
  Sorting block of length 298135
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 298136
Getting block 4 of 8
  Reserving size (1299468) for bucket
  Calculating Z arrays
  Calculating Z arrays time: 00:00:00
  Entering block accumulator loop:
  10%
  20%
  30%
  40%
  50%
  60%
  70%
  80%
  90%
  100%
  Block accumulator loop time: 00:00:00
  Sorting block of length 1051109
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 1051110
Getting block 5 of 8
  Reserving size (1299468) for bucket
  Calculating Z arrays
  Calculating Z arrays time: 00:00:00
  Entering block accumulator loop:
  10%
  20%
  30%
  40%
  50%
  60%
  70%
  80%
  90%
  100%
  Block accumulator loop time: 00:00:00
  Sorting block of length 1024012
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 1024013
Getting block 6 of 8
  Reserving size (1299468) for bucket
  Calculating Z arrays
  Calculating Z arrays time: 00:00:00
  Entering block accumulator loop:
  10%
  20%
  30%
  40%
  50%
  60%
  70%
  80%
  90%
  100%
  Block accumulator loop time: 00:00:01
  Sorting block of length 1157570
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 1157571
Getting block 7 of 8
  Reserving size (1299468) for bucket
  Calculating Z arrays
  Calculating Z arrays time: 00:00:00
  Entering block accumulator loop:
  10%
  20%
  30%
  40%
  50%
  60%
  70%
  80%
  90%
  100%
  Block accumulator loop time: 00:00:00
  Sorting block of length 1122425
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 1122426
Getting block 8 of 8
  Reserving size (1299468) for bucket
  Calculating Z arrays
  Calculating Z arrays time: 00:00:00
  Entering block accumulator loop:
  10%
  20%
  30%
  40%
  50%
  60%
  70%
  80%
  90%
  100%
  Block accumulator loop time: 00:00:00
  Sorting block of length 720326
  (Using difference cover)
  Sorting block time: 00:00:01
Returning block of 720327
Exited Ebwt loop
fchr[A]: 0
fchr[C]: 1147722
fchr[G]: 3465133
fchr[T]: 5779257
fchr[$]: 6930496
Exiting Ebwt::buildToDisk()
Returning from initFromVector
Wrote 6505058 bytes to primary EBWT file: /atium/Data/Nanopore/cpowgs/170816_BUCC/bcc_refs/bvietnamiensis.1.bt2
Wrote 1732632 bytes to secondary EBWT file: /atium/Data/Nanopore/cpowgs/170816_BUCC/bcc_refs/bvietnamiensis.2.bt2
Re-opening _in1 and _in2 as input streams
Returning from Ebwt constructor
Headers:
    len: 6930496
    bwtLen: 6930497
    sz: 1732624
    bwtSz: 1732625
    lineRate: 6
    offRate: 4
    offMask: 0xfffffff0
    ftabChars: 10
    eftabLen: 20
    eftabSz: 80
    ftabLen: 1048577
    ftabSz: 4194308
    offsLen: 433157
    offsSz: 1732628
    lineSz: 64
    sideSz: 64
    sideBwtSz: 48
    sideBwtLen: 192
    numSides: 36097
    numLines: 36097
    ebwtTotLen: 2310208
    ebwtTotSz: 2310208
    color: 0
    reverse: 0
Total time for call to driver() for forward index: 00:00:05
Reading reference sizes
  Time reading reference sizes: 00:00:00
Calculating joined length
Writing header
Reserving space for joined string
Joining reference sequences
  Time to join reference sequences: 00:00:00
  Time to reverse reference sequence: 00:00:00
bmax according to bmaxDivN setting: 1732624
Using parameters --bmax 1299468 --dcv 1024
  Doing ahead-of-time memory usage test
  Passed!  Constructing with these parameters: --bmax 1299468 --dcv 1024
Constructing suffix-array element generator
Building DifferenceCoverSample
  Building sPrime
  Building sPrimeOrder
  V-Sorting samples
  V-Sorting samples time: 00:00:00
  Allocating rank array
  Ranking v-sort output
  Ranking v-sort output time: 00:00:00
  Invoking Larsson-Sadakane on ranks
  Invoking Larsson-Sadakane on ranks time: 00:00:00
  Sanity-checking and returning
Building samples
Reserving space for 12 sample suffixes
Generating random suffixes
QSorting 12 sample offsets, eliminating duplicates
QSorting sample offsets, eliminating duplicates time: 00:00:00
Multikey QSorting 12 samples
  (Using difference cover)
  Multikey QSorting samples time: 00:00:00
Calculating bucket sizes
  Binary sorting into buckets
  10%
  20%
  30%
  40%
  50%
  60%
  70%
  80%
  90%
  100%
  Binary sorting into buckets time: 00:00:01
Splitting and merging
  Splitting and merging time: 00:00:00
Split 2, merged 5; iterating...
  Binary sorting into buckets
  10%
  20%
  30%
  40%
  50%
  60%
  70%
  80%
  90%
  100%
  Binary sorting into buckets time: 00:00:00
Splitting and merging
  Splitting and merging time: 00:00:00
Avg bucket size: 770054 (target: 1299467)
Converting suffix-array elements to index image
Allocating ftab, absorbFtab
Entering Ebwt loop
Getting block 1 of 9
  Reserving size (1299468) for bucket
  Calculating Z arrays
  Calculating Z arrays time: 00:00:00
  Entering block accumulator loop:
  10%
  20%
  30%
  40%
  50%
  60%
  70%
  80%
  90%
  100%
  Block accumulator loop time: 00:00:00
  Sorting block of length 477036
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 477037
Getting block 2 of 9
  Reserving size (1299468) for bucket
  Calculating Z arrays
  Calculating Z arrays time: 00:00:00
  Entering block accumulator loop:
  10%
  20%
  30%
  40%
  50%
  60%
  70%
  80%
  90%
  100%
  Block accumulator loop time: 00:00:00
  Sorting block of length 900441
  (Using difference cover)
  Sorting block time: 00:00:01
Returning block of 900442
Getting block 3 of 9
  Reserving size (1299468) for bucket
  Calculating Z arrays
  Calculating Z arrays time: 00:00:00
  Entering block accumulator loop:
  10%
  20%
  30%
  40%
  50%
  60%
  70%
  80%
  90%
  100%
  Block accumulator loop time: 00:00:00
  Sorting block of length 1001188
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 1001189
Getting block 4 of 9
  Reserving size (1299468) for bucket
  Calculating Z arrays
  Calculating Z arrays time: 00:00:00
  Entering block accumulator loop:
  10%
  20%
  30%
  40%
  50%
  60%
  70%
  80%
  90%
  100%
  Block accumulator loop time: 00:00:00
  Sorting block of length 631165
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 631166
Getting block 5 of 9
  Reserving size (1299468) for bucket
  Calculating Z arrays
  Calculating Z arrays time: 00:00:00
  Entering block accumulator loop:
  10%
  20%
  30%
  40%
  50%
  60%
  70%
  80%
  90%
  100%
  Block accumulator loop time: 00:00:01
  Sorting block of length 899251
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 899252
Getting block 6 of 9
  Reserving size (1299468) for bucket
  Calculating Z arrays
  Calculating Z arrays time: 00:00:00
  Entering block accumulator loop:
  10%
  20%
  30%
  40%
  50%
  60%
  70%
  80%
  90%
  100%
  Block accumulator loop time: 00:00:00
  Sorting block of length 691185
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 691186
Getting block 7 of 9
  Reserving size (1299468) for bucket
  Calculating Z arrays
  Calculating Z arrays time: 00:00:00
  Entering block accumulator loop:
  10%
  20%
  30%
  40%
  50%
  60%
  70%
  80%
  90%
  100%
  Block accumulator loop time: 00:00:00
  Sorting block of length 640040
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 640041
Getting block 8 of 9
  Reserving size (1299468) for bucket
  Calculating Z arrays
  Calculating Z arrays time: 00:00:00
  Entering block accumulator loop:
  10%
  20%
  30%
  40%
  50%
  60%
  70%
  80%
  90%
  100%
  Block accumulator loop time: 00:00:00
  Sorting block of length 1263037
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 1263038
Getting block 9 of 9
  Reserving size (1299468) for bucket
  Calculating Z arrays
  Calculating Z arrays time: 00:00:00
  Entering block accumulator loop:
  10%
  20%
  30%
  40%
  50%
  60%
  70%
  80%
  90%
  100%
  Block accumulator loop time: 00:00:00
  Sorting block of length 427145
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 427146
Exited Ebwt loop
fchr[A]: 0
fchr[C]: 1147722
fchr[G]: 3465133
fchr[T]: 5779257
fchr[$]: 6930496
Exiting Ebwt::buildToDisk()
Returning from initFromVector
Wrote 6505058 bytes to primary EBWT file: /atium/Data/Nanopore/cpowgs/170816_BUCC/bcc_refs/bvietnamiensis.rev.1.bt2
Wrote 1732632 bytes to secondary EBWT file: /atium/Data/Nanopore/cpowgs/170816_BUCC/bcc_refs/bvietnamiensis.rev.2.bt2
Re-opening _in1 and _in2 as input streams
Returning from Ebwt constructor
Headers:
    len: 6930496
    bwtLen: 6930497
    sz: 1732624
    bwtSz: 1732625
    lineRate: 6
    offRate: 4
    offMask: 0xfffffff0
    ftabChars: 10
    eftabLen: 20
    eftabSz: 80
    ftabLen: 1048577
    ftabSz: 4194308
    offsLen: 433157
    offsSz: 1732628
    lineSz: 64
    sideSz: 64
    sideBwtSz: 48
    sideBwtLen: 192
    numSides: 36097
    numLines: 36097
    ebwtTotLen: 2310208
    ebwtTotSz: 2310208
    color: 0
    reverse: 1
Total time for backward call to driver() for mirror index: 00:00:04
